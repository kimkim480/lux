<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="24883304885"><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="405" width="0.0184%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0184%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0184%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0184%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="341" width="0.0184%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="325" width="0.0184%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0184%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0184%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0184%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="261" width="0.0184%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="245" width="0.0184%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="255.50"></text></g><g><title>alloc::alloc::alloc (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="229" width="0.0184%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="239.50"></text></g><g><title>__GI___libc_malloc (4,577,753 samples, 0.02%)</title><rect x="0.0000%" y="213" width="0.0184%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4577753"/><text x="0.2500%" y="223.50"></text></g><g><title>[[stack]] (4,569,062 samples, 0.02%)</title><rect x="0.0184%" y="405" width="0.0184%" height="15" fill="rgb(206,188,39)" fg:x="4577753" fg:w="4569062"/><text x="0.2684%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4,569,062 samples, 0.02%)</title><rect x="0.0184%" y="389" width="0.0184%" height="15" fill="rgb(217,207,13)" fg:x="4577753" fg:w="4569062"/><text x="0.2684%" y="399.50"></text></g><g><title>[unknown] (4,569,062 samples, 0.02%)</title><rect x="0.0184%" y="373" width="0.0184%" height="15" fill="rgb(231,73,38)" fg:x="4577753" fg:w="4569062"/><text x="0.2684%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (4,427,286 samples, 0.02%)</title><rect x="9.1025%" y="357" width="0.0178%" height="15" fill="rgb(225,20,46)" fg:x="2265002580" fg:w="4427286"/><text x="9.3525%" y="367.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (22,750,799 samples, 0.09%)</title><rect x="9.2856%" y="341" width="0.0914%" height="15" fill="rgb(210,31,41)" fg:x="2310567006" fg:w="22750799"/><text x="9.5356%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4,572,432 samples, 0.02%)</title><rect x="9.3587%" y="325" width="0.0184%" height="15" fill="rgb(221,200,47)" fg:x="2328745373" fg:w="4572432"/><text x="9.6087%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (9,149,029 samples, 0.04%)</title><rect x="9.3770%" y="341" width="0.0368%" height="15" fill="rgb(226,26,5)" fg:x="2333317805" fg:w="9149029"/><text x="9.6270%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (9,149,029 samples, 0.04%)</title><rect x="9.3770%" y="325" width="0.0368%" height="15" fill="rgb(249,33,26)" fg:x="2333317805" fg:w="9149029"/><text x="9.6270%" y="335.50"></text></g><g><title>core::mem::replace (9,149,029 samples, 0.04%)</title><rect x="9.3770%" y="309" width="0.0368%" height="15" fill="rgb(235,183,28)" fg:x="2333317805" fg:w="9149029"/><text x="9.6270%" y="319.50"></text></g><g><title>core::ptr::write (9,149,029 samples, 0.04%)</title><rect x="9.3770%" y="293" width="0.0368%" height="15" fill="rgb(221,5,38)" fg:x="2333317805" fg:w="9149029"/><text x="9.6270%" y="303.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (264,054,074 samples, 1.06%)</title><rect x="9.0657%" y="373" width="1.0612%" height="15" fill="rgb(247,18,42)" fg:x="2255847744" fg:w="264054074"/><text x="9.3157%" y="383.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (250,471,952 samples, 1.01%)</title><rect x="9.1203%" y="357" width="1.0066%" height="15" fill="rgb(241,131,45)" fg:x="2269429866" fg:w="250471952"/><text x="9.3703%" y="367.50"></text></g><g><title>core::hint::assert_unchecked (177,434,984 samples, 0.71%)</title><rect x="9.4138%" y="341" width="0.7131%" height="15" fill="rgb(249,31,29)" fg:x="2342466834" fg:w="177434984"/><text x="9.6638%" y="351.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (136,352,959 samples, 0.55%)</title><rect x="9.5789%" y="325" width="0.5480%" height="15" fill="rgb(225,111,53)" fg:x="2383548859" fg:w="136352959"/><text x="9.8289%" y="335.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (36,528,013 samples, 0.15%)</title><rect x="10.1269%" y="373" width="0.1468%" height="15" fill="rgb(238,160,17)" fg:x="2519901818" fg:w="36528013"/><text x="10.3769%" y="383.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::inner (31,998,015 samples, 0.13%)</title><rect x="10.1451%" y="357" width="0.1286%" height="15" fill="rgb(214,148,48)" fg:x="2524431816" fg:w="31998015"/><text x="10.3951%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (31,998,015 samples, 0.13%)</title><rect x="10.1451%" y="341" width="0.1286%" height="15" fill="rgb(232,36,49)" fg:x="2524431816" fg:w="31998015"/><text x="10.3951%" y="351.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (18,128,265 samples, 0.07%)</title><rect x="10.4201%" y="293" width="0.0729%" height="15" fill="rgb(209,103,24)" fg:x="2592870959" fg:w="18128265"/><text x="10.6701%" y="303.50"></text></g><g><title>core::fmt::Arguments::new_const (9,133,999 samples, 0.04%)</title><rect x="10.6561%" y="245" width="0.0367%" height="15" fill="rgb(229,88,8)" fg:x="2651582332" fg:w="9133999"/><text x="10.9061%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (94,975,236 samples, 0.38%)</title><rect x="10.3287%" y="357" width="0.3817%" height="15" fill="rgb(213,181,19)" fg:x="2570131268" fg:w="94975236"/><text x="10.5787%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (94,975,236 samples, 0.38%)</title><rect x="10.3287%" y="341" width="0.3817%" height="15" fill="rgb(254,191,54)" fg:x="2570131268" fg:w="94975236"/><text x="10.5787%" y="351.50"></text></g><g><title>core::slice::raw::from_raw_parts (90,400,619 samples, 0.36%)</title><rect x="10.3471%" y="325" width="0.3633%" height="15" fill="rgb(241,83,37)" fg:x="2574705885" fg:w="90400619"/><text x="10.5971%" y="335.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (85,868,302 samples, 0.35%)</title><rect x="10.3653%" y="309" width="0.3451%" height="15" fill="rgb(233,36,39)" fg:x="2579238202" fg:w="85868302"/><text x="10.6153%" y="319.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (54,107,280 samples, 0.22%)</title><rect x="10.4930%" y="293" width="0.2174%" height="15" fill="rgb(226,3,54)" fg:x="2610999224" fg:w="54107280"/><text x="10.7430%" y="303.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (45,199,643 samples, 0.18%)</title><rect x="10.5288%" y="277" width="0.1816%" height="15" fill="rgb(245,192,40)" fg:x="2619906861" fg:w="45199643"/><text x="10.7788%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (45,199,643 samples, 0.18%)</title><rect x="10.5288%" y="261" width="0.1816%" height="15" fill="rgb(238,167,29)" fg:x="2619906861" fg:w="45199643"/><text x="10.7788%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (4,390,173 samples, 0.02%)</title><rect x="10.6928%" y="245" width="0.0176%" height="15" fill="rgb(232,182,51)" fg:x="2660716331" fg:w="4390173"/><text x="10.9428%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (4,390,173 samples, 0.02%)</title><rect x="10.6928%" y="229" width="0.0176%" height="15" fill="rgb(231,60,39)" fg:x="2660716331" fg:w="4390173"/><text x="10.9428%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (22,805,591 samples, 0.09%)</title><rect x="10.9098%" y="309" width="0.0917%" height="15" fill="rgb(208,69,12)" fg:x="2714728998" fg:w="22805591"/><text x="11.1598%" y="319.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (9,137,280 samples, 0.04%)</title><rect x="11.0927%" y="261" width="0.0367%" height="15" fill="rgb(235,93,37)" fg:x="2760234170" fg:w="9137280"/><text x="11.3427%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::spare_capacity_mut (59,135,623 samples, 0.24%)</title><rect x="11.0015%" y="309" width="0.2377%" height="15" fill="rgb(213,116,39)" fg:x="2737534589" fg:w="59135623"/><text x="11.2515%" y="319.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (54,595,897 samples, 0.22%)</title><rect x="11.0197%" y="293" width="0.2194%" height="15" fill="rgb(222,207,29)" fg:x="2742074315" fg:w="54595897"/><text x="11.2697%" y="303.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut::precondition_check (45,550,402 samples, 0.18%)</title><rect x="11.0561%" y="277" width="0.1831%" height="15" fill="rgb(206,96,30)" fg:x="2751119810" fg:w="45550402"/><text x="11.3061%" y="287.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (27,298,762 samples, 0.11%)</title><rect x="11.1294%" y="261" width="0.1097%" height="15" fill="rgb(218,138,4)" fg:x="2769371450" fg:w="27298762"/><text x="11.3794%" y="271.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (27,298,762 samples, 0.11%)</title><rect x="11.1294%" y="245" width="0.1097%" height="15" fill="rgb(250,191,14)" fg:x="2769371450" fg:w="27298762"/><text x="11.3794%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (22,797,264 samples, 0.09%)</title><rect x="11.1475%" y="229" width="0.0916%" height="15" fill="rgb(239,60,40)" fg:x="2773872948" fg:w="22797264"/><text x="11.3975%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (18,266,266 samples, 0.07%)</title><rect x="11.1657%" y="213" width="0.0734%" height="15" fill="rgb(206,27,48)" fg:x="2778403946" fg:w="18266266"/><text x="11.4157%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (18,266,266 samples, 0.07%)</title><rect x="11.1657%" y="197" width="0.0734%" height="15" fill="rgb(225,35,8)" fg:x="2778403946" fg:w="18266266"/><text x="11.4157%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (4,574,406 samples, 0.02%)</title><rect x="11.5494%" y="245" width="0.0184%" height="15" fill="rgb(250,213,24)" fg:x="2873862963" fg:w="4574406"/><text x="11.7994%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (27,325,346 samples, 0.11%)</title><rect x="11.5311%" y="261" width="0.1098%" height="15" fill="rgb(247,123,22)" fg:x="2869306656" fg:w="27325346"/><text x="11.7811%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (18,194,633 samples, 0.07%)</title><rect x="11.5677%" y="245" width="0.0731%" height="15" fill="rgb(231,138,38)" fg:x="2878437369" fg:w="18194633"/><text x="11.8177%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (59,259,339 samples, 0.24%)</title><rect x="11.6409%" y="261" width="0.2381%" height="15" fill="rgb(231,145,46)" fg:x="2896632002" fg:w="59259339"/><text x="11.8909%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (231,470,443 samples, 0.93%)</title><rect x="11.2391%" y="309" width="0.9302%" height="15" fill="rgb(251,118,11)" fg:x="2796670212" fg:w="231470443"/><text x="11.4891%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (222,584,120 samples, 0.89%)</title><rect x="11.2749%" y="293" width="0.8945%" height="15" fill="rgb(217,147,25)" fg:x="2805556535" fg:w="222584120"/><text x="11.5249%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (222,584,120 samples, 0.89%)</title><rect x="11.2749%" y="277" width="0.8945%" height="15" fill="rgb(247,81,37)" fg:x="2805556535" fg:w="222584120"/><text x="11.5249%" y="287.50"></text></g><g><title>core::hint::assert_unchecked (72,249,314 samples, 0.29%)</title><rect x="11.8790%" y="261" width="0.2904%" height="15" fill="rgb(209,12,38)" fg:x="2955891341" fg:w="72249314"/><text x="12.1290%" y="271.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (67,700,074 samples, 0.27%)</title><rect x="11.8973%" y="245" width="0.2721%" height="15" fill="rgb(227,1,9)" fg:x="2960440581" fg:w="67700074"/><text x="12.1473%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (476,243,778 samples, 1.91%)</title><rect x="10.2737%" y="373" width="1.9139%" height="15" fill="rgb(248,47,43)" fg:x="2556429831" fg:w="476243778"/><text x="10.5237%" y="383.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (367,567,105 samples, 1.48%)</title><rect x="10.7104%" y="357" width="1.4772%" height="15" fill="rgb(221,10,30)" fg:x="2665106504" fg:w="367567105"/><text x="10.9604%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (367,567,105 samples, 1.48%)</title><rect x="10.7104%" y="341" width="1.4772%" height="15" fill="rgb(210,229,1)" fg:x="2665106504" fg:w="367567105"/><text x="10.9604%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (362,980,616 samples, 1.46%)</title><rect x="10.7289%" y="325" width="1.4587%" height="15" fill="rgb(222,148,37)" fg:x="2669692993" fg:w="362980616"/><text x="10.9789%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::take (4,532,954 samples, 0.02%)</title><rect x="12.1694%" y="309" width="0.0182%" height="15" fill="rgb(234,67,33)" fg:x="3028140655" fg:w="4532954"/><text x="12.4194%" y="319.50"></text></g><g><title>core::iter::adapters::take::Take&lt;I&gt;::new (4,532,954 samples, 0.02%)</title><rect x="12.1694%" y="293" width="0.0182%" height="15" fill="rgb(247,98,35)" fg:x="3028140655" fg:w="4532954"/><text x="12.4194%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (9,114,441 samples, 0.04%)</title><rect x="12.4258%" y="341" width="0.0366%" height="15" fill="rgb(247,138,52)" fg:x="3091942182" fg:w="9114441"/><text x="12.6758%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (9,114,441 samples, 0.04%)</title><rect x="12.4258%" y="325" width="0.0366%" height="15" fill="rgb(213,79,30)" fg:x="3091942182" fg:w="9114441"/><text x="12.6758%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (9,114,441 samples, 0.04%)</title><rect x="12.4258%" y="309" width="0.0366%" height="15" fill="rgb(246,177,23)" fg:x="3091942182" fg:w="9114441"/><text x="12.6758%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (9,114,441 samples, 0.04%)</title><rect x="12.4258%" y="293" width="0.0366%" height="15" fill="rgb(230,62,27)" fg:x="3091942182" fg:w="9114441"/><text x="12.6758%" y="303.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (27,100,228 samples, 0.11%)</title><rect x="12.5536%" y="309" width="0.1089%" height="15" fill="rgb(216,154,8)" fg:x="3123746006" fg:w="27100228"/><text x="12.8036%" y="319.50"></text></g><g><title>core::fmt::Arguments::new_const (9,111,350 samples, 0.04%)</title><rect x="12.9361%" y="261" width="0.0366%" height="15" fill="rgb(244,35,45)" fg:x="3218920172" fg:w="9111350"/><text x="13.1861%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (236,142,527 samples, 0.95%)</title><rect x="12.1876%" y="373" width="0.9490%" height="15" fill="rgb(251,115,12)" fg:x="3032673609" fg:w="236142527"/><text x="12.4376%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (208,809,889 samples, 0.84%)</title><rect x="12.2974%" y="357" width="0.8392%" height="15" fill="rgb(240,54,50)" fg:x="3060006247" fg:w="208809889"/><text x="12.5474%" y="367.50"></text></g><g><title>core::slice::raw::from_raw_parts (167,759,513 samples, 0.67%)</title><rect x="12.4624%" y="341" width="0.6742%" height="15" fill="rgb(233,84,52)" fg:x="3101056623" fg:w="167759513"/><text x="12.7124%" y="351.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (163,217,053 samples, 0.66%)</title><rect x="12.4807%" y="325" width="0.6559%" height="15" fill="rgb(207,117,47)" fg:x="3105599083" fg:w="163217053"/><text x="12.7307%" y="335.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (117,969,902 samples, 0.47%)</title><rect x="12.6625%" y="309" width="0.4741%" height="15" fill="rgb(249,43,39)" fg:x="3150846234" fg:w="117969902"/><text x="12.9125%" y="319.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (117,969,902 samples, 0.47%)</title><rect x="12.6625%" y="293" width="0.4741%" height="15" fill="rgb(209,38,44)" fg:x="3150846234" fg:w="117969902"/><text x="12.9125%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (113,421,395 samples, 0.46%)</title><rect x="12.6808%" y="277" width="0.4558%" height="15" fill="rgb(236,212,23)" fg:x="3155394741" fg:w="113421395"/><text x="12.9308%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (40,784,614 samples, 0.16%)</title><rect x="12.9727%" y="261" width="0.1639%" height="15" fill="rgb(242,79,21)" fg:x="3228031522" fg:w="40784614"/><text x="13.2227%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (40,784,614 samples, 0.16%)</title><rect x="12.9727%" y="245" width="0.1639%" height="15" fill="rgb(211,96,35)" fg:x="3228031522" fg:w="40784614"/><text x="13.2227%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (27,335,018 samples, 0.11%)</title><rect x="13.6104%" y="293" width="0.1099%" height="15" fill="rgb(253,215,40)" fg:x="3386711303" fg:w="27335018"/><text x="13.8604%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (36,452,679 samples, 0.15%)</title><rect x="13.6104%" y="341" width="0.1465%" height="15" fill="rgb(211,81,21)" fg:x="3386711303" fg:w="36452679"/><text x="13.8604%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (36,452,679 samples, 0.15%)</title><rect x="13.6104%" y="325" width="0.1465%" height="15" fill="rgb(208,190,38)" fg:x="3386711303" fg:w="36452679"/><text x="13.8604%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (36,452,679 samples, 0.15%)</title><rect x="13.6104%" y="309" width="0.1465%" height="15" fill="rgb(235,213,38)" fg:x="3386711303" fg:w="36452679"/><text x="13.8604%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (9,117,661 samples, 0.04%)</title><rect x="13.7202%" y="293" width="0.0366%" height="15" fill="rgb(237,122,38)" fg:x="3414046321" fg:w="9117661"/><text x="13.9702%" y="303.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (68,383,005 samples, 0.27%)</title><rect x="14.0486%" y="309" width="0.2748%" height="15" fill="rgb(244,218,35)" fg:x="3495753338" fg:w="68383005"/><text x="14.2986%" y="319.50"></text></g><g><title>core::fmt::Arguments::new_const (4,538,274 samples, 0.02%)</title><rect x="15.5463%" y="261" width="0.0182%" height="15" fill="rgb(240,68,47)" fg:x="3868430648" fg:w="4538274"/><text x="15.7963%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (713,197,837 samples, 2.87%)</title><rect x="13.1366%" y="373" width="2.8662%" height="15" fill="rgb(210,16,53)" fg:x="3268816136" fg:w="713197837"/><text x="13.3866%" y="383.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (681,271,951 samples, 2.74%)</title><rect x="13.2649%" y="357" width="2.7379%" height="15" fill="rgb(235,124,12)" fg:x="3300742022" fg:w="681271951"/><text x="13.5149%" y="367.50">al..</text></g><g><title>core::slice::raw::from_raw_parts_mut (558,849,991 samples, 2.25%)</title><rect x="13.7569%" y="341" width="2.2459%" height="15" fill="rgb(224,169,11)" fg:x="3423163982" fg:w="558849991"/><text x="14.0069%" y="351.50">c..</text></g><g><title>core::slice::raw::from_raw_parts_mut::precondition_check (545,258,981 samples, 2.19%)</title><rect x="13.8115%" y="325" width="2.1913%" height="15" fill="rgb(250,166,2)" fg:x="3436754992" fg:w="545258981"/><text x="14.0615%" y="335.50">c..</text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (417,877,630 samples, 1.68%)</title><rect x="14.3234%" y="309" width="1.6793%" height="15" fill="rgb(242,216,29)" fg:x="3564136343" fg:w="417877630"/><text x="14.5734%" y="319.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (408,735,926 samples, 1.64%)</title><rect x="14.3601%" y="293" width="1.6426%" height="15" fill="rgb(230,116,27)" fg:x="3573278047" fg:w="408735926"/><text x="14.6101%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (358,643,189 samples, 1.44%)</title><rect x="14.5615%" y="277" width="1.4413%" height="15" fill="rgb(228,99,48)" fg:x="3623370784" fg:w="358643189"/><text x="14.8115%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (109,045,051 samples, 0.44%)</title><rect x="15.5645%" y="261" width="0.4382%" height="15" fill="rgb(253,11,6)" fg:x="3872968922" fg:w="109045051"/><text x="15.8145%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (109,045,051 samples, 0.44%)</title><rect x="15.5645%" y="245" width="0.4382%" height="15" fill="rgb(247,143,39)" fg:x="3872968922" fg:w="109045051"/><text x="15.8145%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (166,077,906 samples, 0.67%)</title><rect x="17.1704%" y="325" width="0.6674%" height="15" fill="rgb(236,97,10)" fg:x="4272561703" fg:w="166077906"/><text x="17.4204%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (166,077,906 samples, 0.67%)</title><rect x="17.1704%" y="309" width="0.6674%" height="15" fill="rgb(233,208,19)" fg:x="4272561703" fg:w="166077906"/><text x="17.4204%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (166,077,906 samples, 0.67%)</title><rect x="17.1704%" y="293" width="0.6674%" height="15" fill="rgb(216,164,2)" fg:x="4272561703" fg:w="166077906"/><text x="17.4204%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (166,077,906 samples, 0.67%)</title><rect x="17.1704%" y="277" width="0.6674%" height="15" fill="rgb(220,129,5)" fg:x="4272561703" fg:w="166077906"/><text x="17.4204%" y="287.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (109,139,747 samples, 0.44%)</title><rect x="18.6755%" y="293" width="0.4386%" height="15" fill="rgb(242,17,10)" fg:x="4647073990" fg:w="109139747"/><text x="18.9255%" y="303.50"></text></g><g><title>core::fmt::Arguments::new_const (31,830,340 samples, 0.13%)</title><rect x="20.7947%" y="245" width="0.1279%" height="15" fill="rgb(242,107,0)" fg:x="5174398625" fg:w="31830340"/><text x="21.0447%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,229,819,660 samples, 4.94%)</title><rect x="16.4419%" y="357" width="4.9423%" height="15" fill="rgb(251,28,31)" fg:x="4091276736" fg:w="1229819660"/><text x="16.6919%" y="367.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1,229,819,660 samples, 4.94%)</title><rect x="16.4419%" y="341" width="4.9423%" height="15" fill="rgb(233,223,10)" fg:x="4091276736" fg:w="1229819660"/><text x="16.6919%" y="351.50">alloc:..</text></g><g><title>core::slice::raw::from_raw_parts (882,456,787 samples, 3.55%)</title><rect x="17.8378%" y="325" width="3.5464%" height="15" fill="rgb(215,21,27)" fg:x="4438639609" fg:w="882456787"/><text x="18.0878%" y="335.50">core..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (818,635,935 samples, 3.29%)</title><rect x="18.0943%" y="309" width="3.2899%" height="15" fill="rgb(232,23,21)" fg:x="4502460461" fg:w="818635935"/><text x="18.3443%" y="319.50">cor..</text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (564,882,659 samples, 2.27%)</title><rect x="19.1141%" y="293" width="2.2701%" height="15" fill="rgb(244,5,23)" fg:x="4756213737" fg:w="564882659"/><text x="19.3641%" y="303.50">c..</text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (546,661,479 samples, 2.20%)</title><rect x="19.1873%" y="277" width="2.1969%" height="15" fill="rgb(226,81,46)" fg:x="4774434917" fg:w="546661479"/><text x="19.4373%" y="287.50">c..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (510,304,435 samples, 2.05%)</title><rect x="19.3334%" y="261" width="2.0508%" height="15" fill="rgb(247,70,30)" fg:x="4810791961" fg:w="510304435"/><text x="19.5834%" y="271.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (114,867,431 samples, 0.46%)</title><rect x="20.9226%" y="245" width="0.4616%" height="15" fill="rgb(212,68,19)" fg:x="5206228965" fg:w="114867431"/><text x="21.1726%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (114,867,431 samples, 0.46%)</title><rect x="20.9226%" y="229" width="0.4616%" height="15" fill="rgb(240,187,13)" fg:x="5206228965" fg:w="114867431"/><text x="21.1726%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,507,651,350 samples, 6.06%)</title><rect x="16.0028%" y="373" width="6.0589%" height="15" fill="rgb(223,113,26)" fg:x="3982013973" fg:w="1507651350"/><text x="16.2528%" y="383.50">&lt;alloc::..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (168,568,927 samples, 0.68%)</title><rect x="21.3842%" y="357" width="0.6774%" height="15" fill="rgb(206,192,2)" fg:x="5321096396" fg:w="168568927"/><text x="21.6342%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (168,568,927 samples, 0.68%)</title><rect x="21.3842%" y="341" width="0.6774%" height="15" fill="rgb(241,108,4)" fg:x="5321096396" fg:w="168568927"/><text x="21.6342%" y="351.50"></text></g><g><title>&lt;core::cell::Ref&lt;T&gt; as core::ops::deref::Deref&gt;::deref (298,208,031 samples, 1.20%)</title><rect x="22.0616%" y="373" width="1.1984%" height="15" fill="rgb(247,173,49)" fg:x="5489665323" fg:w="298208031"/><text x="22.3116%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4,574,759 samples, 0.02%)</title><rect x="23.2417%" y="357" width="0.0184%" height="15" fill="rgb(224,114,35)" fg:x="5783298595" fg:w="4574759"/><text x="23.4917%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (505,807,525 samples, 2.03%)</title><rect x="23.8637%" y="357" width="2.0327%" height="15" fill="rgb(245,159,27)" fg:x="5938070879" fg:w="505807525"/><text x="24.1137%" y="367.50">_..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (660,583,756 samples, 2.65%)</title><rect x="23.2601%" y="373" width="2.6547%" height="15" fill="rgb(245,172,44)" fg:x="5787873354" fg:w="660583756"/><text x="23.5101%" y="383.50">&lt;c..</text></g><g><title>memcpy@plt (4,578,706 samples, 0.02%)</title><rect x="25.8964%" y="357" width="0.0184%" height="15" fill="rgb(236,23,11)" fg:x="6443878404" fg:w="4578706"/><text x="26.1464%" y="367.50"></text></g><g><title>checked_request2size (4,577,122 samples, 0.02%)</title><rect x="29.1737%" y="149" width="0.0184%" height="15" fill="rgb(205,117,38)" fg:x="7259379739" fg:w="4577122"/><text x="29.4237%" y="159.50"></text></g><g><title>__GI___libc_malloc (45,477,556 samples, 0.18%)</title><rect x="29.0276%" y="165" width="0.1828%" height="15" fill="rgb(237,72,25)" fg:x="7223031247" fg:w="45477556"/><text x="29.2776%" y="175.50"></text></g><g><title>tcache_get (4,551,942 samples, 0.02%)</title><rect x="29.1921%" y="149" width="0.0183%" height="15" fill="rgb(244,70,9)" fg:x="7263956861" fg:w="4551942"/><text x="29.4421%" y="159.50"></text></g><g><title>tcache_get_n (4,551,942 samples, 0.02%)</title><rect x="29.1921%" y="133" width="0.0183%" height="15" fill="rgb(217,125,39)" fg:x="7263956861" fg:w="4551942"/><text x="29.4421%" y="143.50"></text></g><g><title>__rdl_alloc (4,575,592 samples, 0.02%)</title><rect x="29.2104%" y="165" width="0.0184%" height="15" fill="rgb(235,36,10)" fg:x="7268508803" fg:w="4575592"/><text x="29.4604%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (54,627,028 samples, 0.22%)</title><rect x="29.0276%" y="213" width="0.2195%" height="15" fill="rgb(251,123,47)" fg:x="7223031247" fg:w="54627028"/><text x="29.2776%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (54,627,028 samples, 0.22%)</title><rect x="29.0276%" y="197" width="0.2195%" height="15" fill="rgb(221,13,13)" fg:x="7223031247" fg:w="54627028"/><text x="29.2776%" y="207.50"></text></g><g><title>alloc::alloc::alloc (54,627,028 samples, 0.22%)</title><rect x="29.0276%" y="181" width="0.2195%" height="15" fill="rgb(238,131,9)" fg:x="7223031247" fg:w="54627028"/><text x="29.2776%" y="191.50"></text></g><g><title>__rust_alloc (4,573,880 samples, 0.02%)</title><rect x="29.2288%" y="165" width="0.0184%" height="15" fill="rgb(211,50,8)" fg:x="7273084395" fg:w="4573880"/><text x="29.4788%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (68,258,731 samples, 0.27%)</title><rect x="28.9912%" y="277" width="0.2743%" height="15" fill="rgb(245,182,24)" fg:x="7213975581" fg:w="68258731"/><text x="29.2412%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (68,258,731 samples, 0.27%)</title><rect x="28.9912%" y="261" width="0.2743%" height="15" fill="rgb(242,14,37)" fg:x="7213975581" fg:w="68258731"/><text x="29.2412%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (68,258,731 samples, 0.27%)</title><rect x="28.9912%" y="245" width="0.2743%" height="15" fill="rgb(246,228,12)" fg:x="7213975581" fg:w="68258731"/><text x="29.2412%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (68,258,731 samples, 0.27%)</title><rect x="28.9912%" y="229" width="0.2743%" height="15" fill="rgb(213,55,15)" fg:x="7213975581" fg:w="68258731"/><text x="29.2412%" y="239.50"></text></g><g><title>alloc::raw_vec::layout_array (4,576,037 samples, 0.02%)</title><rect x="29.2472%" y="213" width="0.0184%" height="15" fill="rgb(209,9,3)" fg:x="7277658275" fg:w="4576037"/><text x="29.4972%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::repeat (4,576,037 samples, 0.02%)</title><rect x="29.2472%" y="197" width="0.0184%" height="15" fill="rgb(230,59,30)" fg:x="7277658275" fg:w="4576037"/><text x="29.4972%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (4,576,037 samples, 0.02%)</title><rect x="29.2472%" y="181" width="0.0184%" height="15" fill="rgb(209,121,21)" fg:x="7277658275" fg:w="4576037"/><text x="29.4972%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (4,576,037 samples, 0.02%)</title><rect x="29.2472%" y="165" width="0.0184%" height="15" fill="rgb(220,109,13)" fg:x="7277658275" fg:w="4576037"/><text x="29.4972%" y="175.50"></text></g><g><title>core::intrinsics::unlikely (4,576,037 samples, 0.02%)</title><rect x="29.2472%" y="149" width="0.0184%" height="15" fill="rgb(232,18,1)" fg:x="7277658275" fg:w="4576037"/><text x="29.4972%" y="159.50"></text></g><g><title>&lt;lux::value::Op as core::clone::Clone&gt;::clone (847,480,214 samples, 3.41%)</title><rect x="25.9148%" y="373" width="3.4058%" height="15" fill="rgb(215,41,42)" fg:x="6448457110" fg:w="847480214"/><text x="26.1648%" y="383.50">&lt;lu..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (134,857,371 samples, 0.54%)</title><rect x="28.7787%" y="357" width="0.5420%" height="15" fill="rgb(224,123,36)" fg:x="7161079953" fg:w="134857371"/><text x="29.0287%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (81,961,743 samples, 0.33%)</title><rect x="28.9912%" y="341" width="0.3294%" height="15" fill="rgb(240,125,3)" fg:x="7213975581" fg:w="81961743"/><text x="29.2412%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (81,961,743 samples, 0.33%)</title><rect x="28.9912%" y="325" width="0.3294%" height="15" fill="rgb(205,98,50)" fg:x="7213975581" fg:w="81961743"/><text x="29.2412%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (81,961,743 samples, 0.33%)</title><rect x="28.9912%" y="309" width="0.3294%" height="15" fill="rgb(205,185,37)" fg:x="7213975581" fg:w="81961743"/><text x="29.2412%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (81,961,743 samples, 0.33%)</title><rect x="28.9912%" y="293" width="0.3294%" height="15" fill="rgb(238,207,15)" fg:x="7213975581" fg:w="81961743"/><text x="29.2412%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13,703,012 samples, 0.06%)</title><rect x="29.2655%" y="277" width="0.0551%" height="15" fill="rgb(213,199,42)" fg:x="7282234312" fg:w="13703012"/><text x="29.5155%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13,703,012 samples, 0.06%)</title><rect x="29.2655%" y="261" width="0.0551%" height="15" fill="rgb(235,201,11)" fg:x="7282234312" fg:w="13703012"/><text x="29.5155%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (13,703,012 samples, 0.06%)</title><rect x="29.2655%" y="245" width="0.0551%" height="15" fill="rgb(207,46,11)" fg:x="7282234312" fg:w="13703012"/><text x="29.5155%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (9,037,762 samples, 0.04%)</title><rect x="29.8501%" y="325" width="0.0363%" height="15" fill="rgb(241,35,35)" fg:x="7427694264" fg:w="9037762"/><text x="30.1001%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4,495,900 samples, 0.02%)</title><rect x="29.8684%" y="309" width="0.0181%" height="15" fill="rgb(243,32,47)" fg:x="7432236126" fg:w="4495900"/><text x="30.1184%" y="319.50"></text></g><g><title>core::hint::assert_unchecked (67,931,915 samples, 0.27%)</title><rect x="29.8864%" y="325" width="0.2730%" height="15" fill="rgb(247,202,23)" fg:x="7436732026" fg:w="67931915"/><text x="30.1364%" y="335.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (54,337,485 samples, 0.22%)</title><rect x="29.9411%" y="309" width="0.2184%" height="15" fill="rgb(219,102,11)" fg:x="7450326456" fg:w="54337485"/><text x="30.1911%" y="319.50"></text></g><g><title>&lt;lux::value::Value as core::clone::Clone&gt;::clone (213,284,460 samples, 0.86%)</title><rect x="29.3206%" y="373" width="0.8571%" height="15" fill="rgb(243,110,44)" fg:x="7295937324" fg:w="213284460"/><text x="29.5706%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (99,644,635 samples, 0.40%)</title><rect x="29.7773%" y="357" width="0.4004%" height="15" fill="rgb(222,74,54)" fg:x="7409577149" fg:w="99644635"/><text x="30.0273%" y="367.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (99,644,635 samples, 0.40%)</title><rect x="29.7773%" y="341" width="0.4004%" height="15" fill="rgb(216,99,12)" fg:x="7409577149" fg:w="99644635"/><text x="30.0273%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (4,557,843 samples, 0.02%)</title><rect x="30.1594%" y="325" width="0.0183%" height="15" fill="rgb(226,22,26)" fg:x="7504663941" fg:w="4557843"/><text x="30.4094%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (436,114,703 samples, 1.75%)</title><rect x="30.1778%" y="373" width="1.7526%" height="15" fill="rgb(217,163,10)" fg:x="7509221784" fg:w="436114703"/><text x="30.4278%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9,066,231 samples, 0.04%)</title><rect x="32.2047%" y="341" width="0.0364%" height="15" fill="rgb(213,25,53)" fg:x="8013588290" fg:w="9066231"/><text x="32.4547%" y="351.50"></text></g><g><title>__GI___libc_malloc (44,747,693 samples, 0.18%)</title><rect x="32.3697%" y="277" width="0.1798%" height="15" fill="rgb(252,105,26)" fg:x="8054644228" fg:w="44747693"/><text x="32.6197%" y="287.50"></text></g><g><title>tcache_get (17,904,935 samples, 0.07%)</title><rect x="32.4775%" y="261" width="0.0720%" height="15" fill="rgb(220,39,43)" fg:x="8081486986" fg:w="17904935"/><text x="32.7275%" y="271.50"></text></g><g><title>tcache_get_n (17,904,935 samples, 0.07%)</title><rect x="32.4775%" y="245" width="0.0720%" height="15" fill="rgb(229,68,48)" fg:x="8081486986" fg:w="17904935"/><text x="32.7275%" y="255.50"></text></g><g><title>__rust_alloc (4,585,729 samples, 0.02%)</title><rect x="32.5495%" y="277" width="0.0184%" height="15" fill="rgb(252,8,32)" fg:x="8099391921" fg:w="4585729"/><text x="32.7995%" y="287.50"></text></g><g><title>alloc::alloc::alloc (94,789,098 samples, 0.38%)</title><rect x="32.3697%" y="293" width="0.3809%" height="15" fill="rgb(223,20,43)" fg:x="8054644228" fg:w="94789098"/><text x="32.6197%" y="303.50"></text></g><g><title>core::ptr::read_volatile (45,455,676 samples, 0.18%)</title><rect x="32.5679%" y="277" width="0.1827%" height="15" fill="rgb(229,81,49)" fg:x="8103977650" fg:w="45455676"/><text x="32.8179%" y="287.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (36,389,643 samples, 0.15%)</title><rect x="32.6044%" y="261" width="0.1462%" height="15" fill="rgb(236,28,36)" fg:x="8113043683" fg:w="36389643"/><text x="32.8544%" y="271.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (27,281,479 samples, 0.11%)</title><rect x="32.6410%" y="245" width="0.1096%" height="15" fill="rgb(249,185,26)" fg:x="8122151847" fg:w="27281479"/><text x="32.8910%" y="255.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (27,281,479 samples, 0.11%)</title><rect x="32.6410%" y="229" width="0.1096%" height="15" fill="rgb(249,174,33)" fg:x="8122151847" fg:w="27281479"/><text x="32.8910%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (27,281,479 samples, 0.11%)</title><rect x="32.6410%" y="213" width="0.1096%" height="15" fill="rgb(233,201,37)" fg:x="8122151847" fg:w="27281479"/><text x="32.8910%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (13,647,249 samples, 0.05%)</title><rect x="32.7506%" y="293" width="0.0548%" height="15" fill="rgb(221,78,26)" fg:x="8149433326" fg:w="13647249"/><text x="33.0006%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (9,092,050 samples, 0.04%)</title><rect x="32.7689%" y="277" width="0.0365%" height="15" fill="rgb(250,127,30)" fg:x="8153988525" fg:w="9092050"/><text x="33.0189%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (4,515,637 samples, 0.02%)</title><rect x="32.7873%" y="261" width="0.0181%" height="15" fill="rgb(230,49,44)" fg:x="8158564938" fg:w="4515637"/><text x="33.0373%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4,560,364 samples, 0.02%)</title><rect x="32.8232%" y="277" width="0.0183%" height="15" fill="rgb(229,67,23)" fg:x="8167508763" fg:w="4560364"/><text x="33.0732%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (149,425,395 samples, 0.60%)</title><rect x="32.2775%" y="325" width="0.6005%" height="15" fill="rgb(249,83,47)" fg:x="8031696331" fg:w="149425395"/><text x="32.5275%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (149,425,395 samples, 0.60%)</title><rect x="32.2775%" y="309" width="0.6005%" height="15" fill="rgb(215,43,3)" fg:x="8031696331" fg:w="149425395"/><text x="32.5275%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (18,041,151 samples, 0.07%)</title><rect x="32.8055%" y="293" width="0.0725%" height="15" fill="rgb(238,154,13)" fg:x="8163080575" fg:w="18041151"/><text x="33.0555%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (9,052,599 samples, 0.04%)</title><rect x="32.8416%" y="277" width="0.0364%" height="15" fill="rgb(219,56,2)" fg:x="8172069127" fg:w="9052599"/><text x="33.0916%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (4,544,277 samples, 0.02%)</title><rect x="32.8597%" y="261" width="0.0183%" height="15" fill="rgb(233,0,4)" fg:x="8176577449" fg:w="4544277"/><text x="33.1097%" y="271.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (253,793,127 samples, 1.02%)</title><rect x="31.9304%" y="373" width="1.0199%" height="15" fill="rgb(235,30,7)" fg:x="7945336487" fg:w="253793127"/><text x="32.1804%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (208,234,987 samples, 0.84%)</title><rect x="32.1135%" y="357" width="0.8368%" height="15" fill="rgb(250,79,13)" fg:x="7990894627" fg:w="208234987"/><text x="32.3635%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (176,475,093 samples, 0.71%)</title><rect x="32.2411%" y="341" width="0.7092%" height="15" fill="rgb(211,146,34)" fg:x="8022654521" fg:w="176475093"/><text x="32.4911%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (18,007,888 samples, 0.07%)</title><rect x="32.8780%" y="325" width="0.0724%" height="15" fill="rgb(228,22,38)" fg:x="8181121726" fg:w="18007888"/><text x="33.1280%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (18,007,888 samples, 0.07%)</title><rect x="32.8780%" y="309" width="0.0724%" height="15" fill="rgb(235,168,5)" fg:x="8181121726" fg:w="18007888"/><text x="33.1280%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (13,708,355 samples, 0.06%)</title><rect x="32.8952%" y="293" width="0.0551%" height="15" fill="rgb(221,155,16)" fg:x="8185421259" fg:w="13708355"/><text x="33.1452%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (163,805,746 samples, 0.66%)</title><rect x="32.9503%" y="373" width="0.6583%" height="15" fill="rgb(215,215,53)" fg:x="8199129614" fg:w="163805746"/><text x="33.2003%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (81,749,253 samples, 0.33%)</title><rect x="33.8641%" y="357" width="0.3285%" height="15" fill="rgb(223,4,10)" fg:x="8426516595" fg:w="81749253"/><text x="34.1141%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (218,006,470 samples, 0.88%)</title><rect x="33.6086%" y="373" width="0.8761%" height="15" fill="rgb(234,103,6)" fg:x="8362935360" fg:w="218006470"/><text x="33.8586%" y="383.50"></text></g><g><title>core::hint::assert_unchecked (72,675,982 samples, 0.29%)</title><rect x="34.1927%" y="357" width="0.2921%" height="15" fill="rgb(227,97,0)" fg:x="8508265848" fg:w="72675982"/><text x="34.4427%" y="367.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (63,505,973 samples, 0.26%)</title><rect x="34.2295%" y="341" width="0.2552%" height="15" fill="rgb(234,150,53)" fg:x="8517435857" fg:w="63505973"/><text x="34.4795%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (40,358,111 samples, 0.16%)</title><rect x="34.5943%" y="357" width="0.1622%" height="15" fill="rgb(228,201,54)" fg:x="8608207387" fg:w="40358111"/><text x="34.8443%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (140,079,165 samples, 0.56%)</title><rect x="34.4847%" y="373" width="0.5629%" height="15" fill="rgb(222,22,37)" fg:x="8580941830" fg:w="140079165"/><text x="34.7347%" y="383.50"></text></g><g><title>core::ptr::write (72,455,497 samples, 0.29%)</title><rect x="34.7565%" y="357" width="0.2912%" height="15" fill="rgb(237,53,32)" fg:x="8648565498" fg:w="72455497"/><text x="35.0065%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (72,455,497 samples, 0.29%)</title><rect x="34.7565%" y="341" width="0.2912%" height="15" fill="rgb(233,25,53)" fg:x="8648565498" fg:w="72455497"/><text x="35.0065%" y="351.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::inner (4,553,545 samples, 0.02%)</title><rect x="35.3757%" y="293" width="0.0183%" height="15" fill="rgb(210,40,34)" fg:x="8802642653" fg:w="4553545"/><text x="35.6257%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4,553,545 samples, 0.02%)</title><rect x="35.3757%" y="277" width="0.0183%" height="15" fill="rgb(241,220,44)" fg:x="8802642653" fg:w="4553545"/><text x="35.6257%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast_const (4,553,545 samples, 0.02%)</title><rect x="35.3757%" y="261" width="0.0183%" height="15" fill="rgb(235,28,35)" fg:x="8802642653" fg:w="4553545"/><text x="35.6257%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (90,713,550 samples, 0.36%)</title><rect x="35.0477%" y="373" width="0.3646%" height="15" fill="rgb(210,56,17)" fg:x="8721020995" fg:w="90713550"/><text x="35.2977%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[lux::value::Value]&gt; (86,133,311 samples, 0.35%)</title><rect x="35.0661%" y="357" width="0.3461%" height="15" fill="rgb(224,130,29)" fg:x="8725601234" fg:w="86133311"/><text x="35.3161%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;lux::value::Value&gt; (72,591,887 samples, 0.29%)</title><rect x="35.1205%" y="341" width="0.2917%" height="15" fill="rgb(235,212,8)" fg:x="8739142658" fg:w="72591887"/><text x="35.3705%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;lux::value::Function&gt;&gt;&gt; (36,495,374 samples, 0.15%)</title><rect x="35.2656%" y="325" width="0.1467%" height="15" fill="rgb(223,33,50)" fg:x="8775239171" fg:w="36495374"/><text x="35.5156%" y="335.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22,796,433 samples, 0.09%)</title><rect x="35.3206%" y="309" width="0.0916%" height="15" fill="rgb(219,149,13)" fg:x="8788938112" fg:w="22796433"/><text x="35.5706%" y="319.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (4,538,347 samples, 0.02%)</title><rect x="35.3940%" y="293" width="0.0182%" height="15" fill="rgb(250,156,29)" fg:x="8807196198" fg:w="4538347"/><text x="35.6440%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (13,617,407 samples, 0.05%)</title><rect x="35.4122%" y="373" width="0.0547%" height="15" fill="rgb(216,193,19)" fg:x="8811734545" fg:w="13617407"/><text x="35.6622%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (72,549,995 samples, 0.29%)</title><rect x="38.5421%" y="325" width="0.2916%" height="15" fill="rgb(216,135,14)" fg:x="9590536269" fg:w="72549995"/><text x="38.7921%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (49,953,566 samples, 0.20%)</title><rect x="38.8336%" y="325" width="0.2008%" height="15" fill="rgb(241,47,5)" fg:x="9663086264" fg:w="49953566"/><text x="39.0836%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (49,953,566 samples, 0.20%)</title><rect x="38.8336%" y="309" width="0.2008%" height="15" fill="rgb(233,42,35)" fg:x="9663086264" fg:w="49953566"/><text x="39.0836%" y="319.50"></text></g><g><title>core::mem::replace (49,953,566 samples, 0.20%)</title><rect x="38.8336%" y="293" width="0.2008%" height="15" fill="rgb(231,13,6)" fg:x="9663086264" fg:w="49953566"/><text x="39.0836%" y="303.50"></text></g><g><title>core::ptr::write (49,953,566 samples, 0.20%)</title><rect x="38.8336%" y="277" width="0.2008%" height="15" fill="rgb(207,181,40)" fg:x="9663086264" fg:w="49953566"/><text x="39.0836%" y="287.50"></text></g><g><title>core::cell::is_reading (13,664,687 samples, 0.05%)</title><rect x="39.0344%" y="325" width="0.0549%" height="15" fill="rgb(254,173,49)" fg:x="9713039830" fg:w="13664687"/><text x="39.2844%" y="335.50"></text></g><g><title>core::cell::BorrowRef::new (299,251,319 samples, 1.20%)</title><rect x="38.2323%" y="341" width="1.2026%" height="15" fill="rgb(221,1,38)" fg:x="9513458239" fg:w="299251319"/><text x="38.4823%" y="351.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (86,005,041 samples, 0.35%)</title><rect x="39.0893%" y="325" width="0.3456%" height="15" fill="rgb(206,124,46)" fg:x="9726704517" fg:w="86005041"/><text x="39.3393%" y="335.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (54,543,625 samples, 0.22%)</title><rect x="39.4349%" y="341" width="0.2192%" height="15" fill="rgb(249,21,11)" fg:x="9812709558" fg:w="54543625"/><text x="39.6849%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1,369,605,892 samples, 5.50%)</title><rect x="35.4670%" y="373" width="5.5041%" height="15" fill="rgb(222,201,40)" fg:x="8825351952" fg:w="1369605892"/><text x="35.7170%" y="383.50">core::c..</text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1,069,232,313 samples, 4.30%)</title><rect x="36.6741%" y="357" width="4.2970%" height="15" fill="rgb(235,61,29)" fg:x="9125725531" fg:w="1069232313"/><text x="36.9241%" y="367.50">core:..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (327,704,661 samples, 1.32%)</title><rect x="39.6541%" y="341" width="1.3170%" height="15" fill="rgb(219,207,3)" fg:x="9867253183" fg:w="327704661"/><text x="39.9041%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (191,187,374 samples, 0.77%)</title><rect x="40.2027%" y="325" width="0.7683%" height="15" fill="rgb(222,56,46)" fg:x="10003770470" fg:w="191187374"/><text x="40.4527%" y="335.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (9,139,132 samples, 0.04%)</title><rect x="41.6452%" y="309" width="0.0367%" height="15" fill="rgb(239,76,54)" fg:x="10362703477" fg:w="9139132"/><text x="41.8952%" y="319.50"></text></g><g><title>&lt;lux::value::Value as core::clone::Clone&gt;::clone (231,576,552 samples, 0.93%)</title><rect x="41.2084%" y="357" width="0.9307%" height="15" fill="rgb(231,124,27)" fg:x="10254015150" fg:w="231576552"/><text x="41.4584%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (150,064,128 samples, 0.60%)</title><rect x="41.5360%" y="341" width="0.6031%" height="15" fill="rgb(249,195,6)" fg:x="10335527574" fg:w="150064128"/><text x="41.7860%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (145,567,122 samples, 0.58%)</title><rect x="41.5541%" y="325" width="0.5850%" height="15" fill="rgb(237,174,47)" fg:x="10340024580" fg:w="145567122"/><text x="41.8041%" y="335.50"></text></g><g><title>core::hint::assert_unchecked (113,749,093 samples, 0.46%)</title><rect x="41.6819%" y="309" width="0.4571%" height="15" fill="rgb(206,201,31)" fg:x="10371842609" fg:w="113749093"/><text x="41.9319%" y="319.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (100,041,475 samples, 0.40%)</title><rect x="41.7370%" y="293" width="0.4020%" height="15" fill="rgb(231,57,52)" fg:x="10385550227" fg:w="100041475"/><text x="41.9870%" y="303.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (431,646,321 samples, 1.73%)</title><rect x="40.9711%" y="373" width="1.7347%" height="15" fill="rgb(248,177,22)" fg:x="10194957844" fg:w="431646321"/><text x="41.2211%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (141,012,463 samples, 0.57%)</title><rect x="42.1391%" y="357" width="0.5667%" height="15" fill="rgb(215,211,37)" fg:x="10485591702" fg:w="141012463"/><text x="42.3891%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (131,838,062 samples, 0.53%)</title><rect x="42.7058%" y="373" width="0.5298%" height="15" fill="rgb(241,128,51)" fg:x="10626604165" fg:w="131838062"/><text x="42.9558%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (109,219,561 samples, 0.44%)</title><rect x="42.7967%" y="357" width="0.4389%" height="15" fill="rgb(227,165,31)" fg:x="10649222666" fg:w="109219561"/><text x="43.0467%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (90,928,406 samples, 0.37%)</title><rect x="43.2356%" y="373" width="0.3654%" height="15" fill="rgb(228,167,24)" fg:x="10758442227" fg:w="90928406"/><text x="43.4856%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (122,845,516 samples, 0.49%)</title><rect x="43.7645%" y="357" width="0.4937%" height="15" fill="rgb(228,143,12)" fg:x="10890047428" fg:w="122845516"/><text x="44.0145%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (168,085,558 samples, 0.68%)</title><rect x="43.6010%" y="373" width="0.6755%" height="15" fill="rgb(249,149,8)" fg:x="10849370633" fg:w="168085558"/><text x="43.8510%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;lux::value::Value&gt; (4,563,247 samples, 0.02%)</title><rect x="44.2582%" y="357" width="0.0183%" height="15" fill="rgb(243,35,44)" fg:x="11012892944" fg:w="4563247"/><text x="44.5082%" y="367.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::inner (4,573,648 samples, 0.02%)</title><rect x="44.3311%" y="341" width="0.0184%" height="15" fill="rgb(246,89,9)" fg:x="11031036786" fg:w="4573648"/><text x="44.5811%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4,573,648 samples, 0.02%)</title><rect x="44.3311%" y="325" width="0.0184%" height="15" fill="rgb(233,213,13)" fg:x="11031036786" fg:w="4573648"/><text x="44.5811%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast_const (4,573,648 samples, 0.02%)</title><rect x="44.3311%" y="309" width="0.0184%" height="15" fill="rgb(233,141,41)" fg:x="11031036786" fg:w="4573648"/><text x="44.5811%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;lux::value::Function&gt;&gt;&gt; (54,433,766 samples, 0.22%)</title><rect x="44.2765%" y="373" width="0.2188%" height="15" fill="rgb(239,167,4)" fg:x="11017456191" fg:w="54433766"/><text x="44.5265%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49,869,523 samples, 0.20%)</title><rect x="44.2948%" y="357" width="0.2004%" height="15" fill="rgb(209,217,16)" fg:x="11022020434" fg:w="49869523"/><text x="44.5448%" y="367.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (36,279,523 samples, 0.15%)</title><rect x="44.3495%" y="341" width="0.1458%" height="15" fill="rgb(219,88,35)" fg:x="11035610434" fg:w="36279523"/><text x="44.5995%" y="351.50"></text></g><g><title>__GI___libc_free (54,617,222 samples, 0.22%)</title><rect x="45.1143%" y="245" width="0.2195%" height="15" fill="rgb(220,193,23)" fg:x="11225937332" fg:w="54617222"/><text x="45.3643%" y="255.50"></text></g><g><title>_int_free (36,456,297 samples, 0.15%)</title><rect x="45.1873%" y="229" width="0.1465%" height="15" fill="rgb(230,90,52)" fg:x="11244098257" fg:w="36456297"/><text x="45.4373%" y="239.50"></text></g><g><title>tcache_put (4,536,096 samples, 0.02%)</title><rect x="45.3156%" y="213" width="0.0182%" height="15" fill="rgb(252,106,19)" fg:x="11276018458" fg:w="4536096"/><text x="45.5656%" y="223.50"></text></g><g><title>__rdl_dealloc (27,202,779 samples, 0.11%)</title><rect x="45.3338%" y="245" width="0.1093%" height="15" fill="rgb(206,74,20)" fg:x="11280554554" fg:w="27202779"/><text x="45.5838%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (13,510,276 samples, 0.05%)</title><rect x="45.3889%" y="229" width="0.0543%" height="15" fill="rgb(230,138,44)" fg:x="11294247057" fg:w="13510276"/><text x="45.6389%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (100,099,493 samples, 0.40%)</title><rect x="45.0592%" y="261" width="0.4023%" height="15" fill="rgb(235,182,43)" fg:x="11212228420" fg:w="100099493"/><text x="45.3092%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::align (4,570,580 samples, 0.02%)</title><rect x="45.4431%" y="245" width="0.0184%" height="15" fill="rgb(242,16,51)" fg:x="11307757333" fg:w="4570580"/><text x="45.6931%" y="255.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (4,570,580 samples, 0.02%)</title><rect x="45.4431%" y="229" width="0.0184%" height="15" fill="rgb(248,9,4)" fg:x="11307757333" fg:w="4570580"/><text x="45.6931%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::size (9,013,653 samples, 0.04%)</title><rect x="45.4615%" y="261" width="0.0362%" height="15" fill="rgb(210,31,22)" fg:x="11312327913" fg:w="9013653"/><text x="45.7115%" y="271.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (136,397,109 samples, 0.55%)</title><rect x="44.9678%" y="293" width="0.5481%" height="15" fill="rgb(239,54,39)" fg:x="11189474907" fg:w="136397109"/><text x="45.2178%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (127,247,005 samples, 0.51%)</title><rect x="45.0046%" y="277" width="0.5114%" height="15" fill="rgb(230,99,41)" fg:x="11198625011" fg:w="127247005"/><text x="45.2546%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4,530,450 samples, 0.02%)</title><rect x="45.4977%" y="261" width="0.0182%" height="15" fill="rgb(253,106,12)" fg:x="11321341566" fg:w="4530450"/><text x="45.7477%" y="271.50"></text></g><g><title>&lt;alloc::rc::WeakInner as alloc::rc::RcInnerPtr&gt;::weak_ref (4,567,688 samples, 0.02%)</title><rect x="45.5708%" y="277" width="0.0184%" height="15" fill="rgb(213,46,41)" fg:x="11339531370" fg:w="4567688"/><text x="45.8208%" y="287.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_weak (22,787,169 samples, 0.09%)</title><rect x="45.5159%" y="293" width="0.0916%" height="15" fill="rgb(215,133,35)" fg:x="11325872016" fg:w="22787169"/><text x="45.7659%" y="303.50"></text></g><g><title>alloc::rc::RcInnerPtr::weak (4,560,127 samples, 0.02%)</title><rect x="45.5892%" y="277" width="0.0183%" height="15" fill="rgb(213,28,5)" fg:x="11344099058" fg:w="4560127"/><text x="45.8392%" y="287.50"></text></g><g><title>alloc::rc::Weak&lt;T,A&gt;::inner (31,854,097 samples, 0.13%)</title><rect x="45.6075%" y="293" width="0.1280%" height="15" fill="rgb(215,77,49)" fg:x="11348659185" fg:w="31854097"/><text x="45.8575%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Weak&lt;lux::value::Closure,&amp;alloc::alloc::Global&gt;&gt; (327,185,005 samples, 1.31%)</title><rect x="44.6039%" y="325" width="1.3149%" height="15" fill="rgb(248,100,22)" fg:x="11098924182" fg:w="327185005"/><text x="44.8539%" y="335.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (322,665,730 samples, 1.30%)</title><rect x="44.6221%" y="309" width="1.2967%" height="15" fill="rgb(208,67,9)" fg:x="11103443457" fg:w="322665730"/><text x="44.8721%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (45,595,905 samples, 0.18%)</title><rect x="45.7355%" y="293" width="0.1832%" height="15" fill="rgb(219,133,21)" fg:x="11380513282" fg:w="45595905"/><text x="45.9855%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (45,595,905 samples, 0.18%)</title><rect x="45.7355%" y="277" width="0.1832%" height="15" fill="rgb(246,46,29)" fg:x="11380513282" fg:w="45595905"/><text x="45.9855%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (45,595,905 samples, 0.18%)</title><rect x="45.7355%" y="261" width="0.1832%" height="15" fill="rgb(246,185,52)" fg:x="11380513282" fg:w="45595905"/><text x="45.9855%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (27,391,703 samples, 0.11%)</title><rect x="45.8087%" y="245" width="0.1101%" height="15" fill="rgb(252,136,11)" fg:x="11398717484" fg:w="27391703"/><text x="46.0587%" y="255.50"></text></g><g><title>core::ptr::alignment::Alignment::new (4,562,585 samples, 0.02%)</title><rect x="45.9004%" y="229" width="0.0183%" height="15" fill="rgb(219,138,53)" fg:x="11421546602" fg:w="4562585"/><text x="46.1504%" y="239.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::inner (4,478,587 samples, 0.02%)</title><rect x="46.0105%" y="277" width="0.0180%" height="15" fill="rgb(211,51,23)" fg:x="11448944913" fg:w="4478587"/><text x="46.2605%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4,478,587 samples, 0.02%)</title><rect x="46.0105%" y="261" width="0.0180%" height="15" fill="rgb(247,221,28)" fg:x="11448944913" fg:w="4478587"/><text x="46.2605%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast_const (4,478,587 samples, 0.02%)</title><rect x="46.0105%" y="245" width="0.0180%" height="15" fill="rgb(251,222,45)" fg:x="11448944913" fg:w="4478587"/><text x="46.2605%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (9,131,405 samples, 0.04%)</title><rect x="46.0285%" y="277" width="0.0367%" height="15" fill="rgb(217,162,53)" fg:x="11453423500" fg:w="9131405"/><text x="46.2785%" y="287.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (9,131,405 samples, 0.04%)</title><rect x="46.0285%" y="261" width="0.0367%" height="15" fill="rgb(229,93,14)" fg:x="11453423500" fg:w="9131405"/><text x="46.2785%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;lux::value::Function&gt;&gt;&gt; (40,909,176 samples, 0.16%)</title><rect x="45.9188%" y="309" width="0.1644%" height="15" fill="rgb(209,67,49)" fg:x="11426109187" fg:w="40909176"/><text x="46.1688%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40,909,176 samples, 0.16%)</title><rect x="45.9188%" y="293" width="0.1644%" height="15" fill="rgb(213,87,29)" fg:x="11426109187" fg:w="40909176"/><text x="46.1688%" y="303.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (4,463,458 samples, 0.02%)</title><rect x="46.0652%" y="277" width="0.0179%" height="15" fill="rgb(205,151,52)" fg:x="11462554905" fg:w="4463458"/><text x="46.3152%" y="287.50"></text></g><g><title>&lt;alloc::rc::RcInner&lt;T&gt; as alloc::rc::RcInnerPtr&gt;::strong_ref (4,463,458 samples, 0.02%)</title><rect x="46.0652%" y="261" width="0.0179%" height="15" fill="rgb(253,215,39)" fg:x="11462554905" fg:w="4463458"/><text x="46.3152%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13,662,805 samples, 0.05%)</title><rect x="46.1015%" y="293" width="0.0549%" height="15" fill="rgb(221,220,41)" fg:x="11471586234" fg:w="13662805"/><text x="46.3515%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::rc::Rc&lt;core::cell::RefCell&lt;lux::value::Upvalue&gt;&gt;]&gt; (4,561,103 samples, 0.02%)</title><rect x="46.1381%" y="277" width="0.0183%" height="15" fill="rgb(218,133,21)" fg:x="11480687936" fg:w="4561103"/><text x="46.3881%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;lux::value::Closure&gt;&gt; (449,746,945 samples, 1.81%)</title><rect x="44.4953%" y="373" width="1.8074%" height="15" fill="rgb(221,193,43)" fg:x="11071889957" fg:w="449746945"/><text x="44.7453%" y="383.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (436,380,631 samples, 1.75%)</title><rect x="44.5490%" y="357" width="1.7537%" height="15" fill="rgb(240,128,52)" fg:x="11085256271" fg:w="436380631"/><text x="44.7990%" y="367.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (422,712,720 samples, 1.70%)</title><rect x="44.6039%" y="341" width="1.6988%" height="15" fill="rgb(253,114,12)" fg:x="11098924182" fg:w="422712720"/><text x="44.8539%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;lux::value::Closure&gt; (95,527,715 samples, 0.38%)</title><rect x="45.9188%" y="325" width="0.3839%" height="15" fill="rgb(215,223,47)" fg:x="11426109187" fg:w="95527715"/><text x="46.1688%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;lux::value::Upvalue&gt;&gt;&gt;&gt; (54,618,539 samples, 0.22%)</title><rect x="46.0832%" y="309" width="0.2195%" height="15" fill="rgb(248,225,23)" fg:x="11467018363" fg:w="54618539"/><text x="46.3332%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;lux::value::Upvalue&gt;&gt;&gt;&gt; (36,387,863 samples, 0.15%)</title><rect x="46.1564%" y="293" width="0.1462%" height="15" fill="rgb(250,108,0)" fg:x="11485249039" fg:w="36387863"/><text x="46.4064%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36,387,863 samples, 0.15%)</title><rect x="46.1564%" y="277" width="0.1462%" height="15" fill="rgb(228,208,7)" fg:x="11485249039" fg:w="36387863"/><text x="46.4064%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (31,823,995 samples, 0.13%)</title><rect x="46.1748%" y="261" width="0.1279%" height="15" fill="rgb(244,45,10)" fg:x="11489812907" fg:w="31823995"/><text x="46.4248%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,495,195 samples, 0.02%)</title><rect x="46.4121%" y="341" width="0.0181%" height="15" fill="rgb(207,125,25)" fg:x="11548871656" fg:w="4495195"/><text x="46.6621%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,576,314 samples, 0.02%)</title><rect x="46.4302%" y="325" width="0.0184%" height="15" fill="rgb(210,195,18)" fg:x="11553366851" fg:w="4576314"/><text x="46.6802%" y="335.50"></text></g><g><title>__GI___libc_free (27,337,965 samples, 0.11%)</title><rect x="46.4486%" y="325" width="0.1099%" height="15" fill="rgb(249,80,12)" fg:x="11557943165" fg:w="27337965"/><text x="46.6986%" y="335.50"></text></g><g><title>_int_free (13,666,072 samples, 0.05%)</title><rect x="46.5035%" y="309" width="0.0549%" height="15" fill="rgb(221,65,9)" fg:x="11571615058" fg:w="13666072"/><text x="46.7535%" y="319.50"></text></g><g><title>tcache_put (4,551,704 samples, 0.02%)</title><rect x="46.5402%" y="293" width="0.0183%" height="15" fill="rgb(235,49,36)" fg:x="11580729426" fg:w="4551704"/><text x="46.7902%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (72,754,290 samples, 0.29%)</title><rect x="46.3027%" y="373" width="0.2924%" height="15" fill="rgb(225,32,20)" fg:x="11521636902" fg:w="72754290"/><text x="46.5527%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (63,799,329 samples, 0.26%)</title><rect x="46.3387%" y="357" width="0.2564%" height="15" fill="rgb(215,141,46)" fg:x="11530591863" fg:w="63799329"/><text x="46.5887%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (41,024,341 samples, 0.16%)</title><rect x="46.4302%" y="341" width="0.1649%" height="15" fill="rgb(250,160,47)" fg:x="11553366851" fg:w="41024341"/><text x="46.6802%" y="351.50"></text></g><g><title>__rdl_dealloc (9,110,062 samples, 0.04%)</title><rect x="46.5585%" y="325" width="0.0366%" height="15" fill="rgb(216,222,40)" fg:x="11585281130" fg:w="9110062"/><text x="46.8085%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9,110,062 samples, 0.04%)</title><rect x="46.5585%" y="309" width="0.0366%" height="15" fill="rgb(234,217,39)" fg:x="11585281130" fg:w="9110062"/><text x="46.8085%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4,535,264 samples, 0.02%)</title><rect x="48.5334%" y="325" width="0.0182%" height="15" fill="rgb(207,178,40)" fg:x="12076723958" fg:w="4535264"/><text x="48.7834%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;lux::value::Function&gt;&gt; (532,405,087 samples, 2.14%)</title><rect x="46.5951%" y="373" width="2.1396%" height="15" fill="rgb(221,136,13)" fg:x="11594391192" fg:w="532405087"/><text x="46.8451%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (464,194,282 samples, 1.87%)</title><rect x="46.8692%" y="357" width="1.8655%" height="15" fill="rgb(249,199,10)" fg:x="11662601997" fg:w="464194282"/><text x="47.1192%" y="367.50">c..</text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (314,145,948 samples, 1.26%)</title><rect x="47.4722%" y="341" width="1.2625%" height="15" fill="rgb(249,222,13)" fg:x="11812650331" fg:w="314145948"/><text x="47.7222%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (45,537,057 samples, 0.18%)</title><rect x="48.5517%" y="325" width="0.1830%" height="15" fill="rgb(244,185,38)" fg:x="12081259222" fg:w="45537057"/><text x="48.8017%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (45,537,057 samples, 0.18%)</title><rect x="48.5517%" y="309" width="0.1830%" height="15" fill="rgb(236,202,9)" fg:x="12081259222" fg:w="45537057"/><text x="48.8017%" y="319.50"></text></g><g><title>core::mem::replace (45,537,057 samples, 0.18%)</title><rect x="48.5517%" y="293" width="0.1830%" height="15" fill="rgb(250,229,37)" fg:x="12081259222" fg:w="45537057"/><text x="48.8017%" y="303.50"></text></g><g><title>core::ptr::write (45,537,057 samples, 0.18%)</title><rect x="48.5517%" y="277" width="0.1830%" height="15" fill="rgb(206,174,23)" fg:x="12081259222" fg:w="45537057"/><text x="48.8017%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;lux::value::Function&gt;&gt;&gt; (18,242,535 samples, 0.07%)</title><rect x="48.7347%" y="357" width="0.0733%" height="15" fill="rgb(211,33,43)" fg:x="12126796279" fg:w="18242535"/><text x="48.9847%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18,242,535 samples, 0.07%)</title><rect x="48.7347%" y="341" width="0.0733%" height="15" fill="rgb(245,58,50)" fg:x="12126796279" fg:w="18242535"/><text x="48.9847%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (9,119,052 samples, 0.04%)</title><rect x="48.7713%" y="325" width="0.0366%" height="15" fill="rgb(244,68,36)" fg:x="12135919762" fg:w="9119052"/><text x="49.0213%" y="335.50"></text></g><g><title>&lt;alloc::rc::RcInner&lt;T&gt; as alloc::rc::RcInnerPtr&gt;::strong_ref (4,586,987 samples, 0.02%)</title><rect x="48.7895%" y="309" width="0.0184%" height="15" fill="rgb(232,229,15)" fg:x="12140451827" fg:w="4586987"/><text x="49.0395%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,572,490 samples, 0.02%)</title><rect x="48.8446%" y="341" width="0.0184%" height="15" fill="rgb(254,30,23)" fg:x="12154138400" fg:w="4572490"/><text x="49.0946%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::rc::Rc&lt;core::cell::RefCell&lt;lux::value::Upvalue&gt;&gt;]&gt; (4,572,490 samples, 0.02%)</title><rect x="48.8446%" y="325" width="0.0184%" height="15" fill="rgb(235,160,14)" fg:x="12154138400" fg:w="4572490"/><text x="49.0946%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;lux::value::CallFrame&gt; (86,440,569 samples, 0.35%)</title><rect x="48.7347%" y="373" width="0.3474%" height="15" fill="rgb(212,155,44)" fg:x="12126796279" fg:w="86440569"/><text x="48.9847%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;lux::value::Upvalue&gt;&gt;&gt;&gt; (68,198,034 samples, 0.27%)</title><rect x="48.8080%" y="357" width="0.2741%" height="15" fill="rgb(226,2,50)" fg:x="12145038814" fg:w="68198034"/><text x="49.0580%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;lux::value::Upvalue&gt;&gt;&gt;&gt; (54,525,958 samples, 0.22%)</title><rect x="48.8629%" y="341" width="0.2191%" height="15" fill="rgb(234,177,6)" fg:x="12158710890" fg:w="54525958"/><text x="49.1129%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54,525,958 samples, 0.22%)</title><rect x="48.8629%" y="325" width="0.2191%" height="15" fill="rgb(217,24,9)" fg:x="12158710890" fg:w="54525958"/><text x="49.1129%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (36,316,739 samples, 0.15%)</title><rect x="48.9361%" y="309" width="0.1459%" height="15" fill="rgb(220,13,46)" fg:x="12176920109" fg:w="36316739"/><text x="49.1861%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;lux::value::Value&gt; (181,715,472 samples, 0.73%)</title><rect x="49.0821%" y="373" width="0.7303%" height="15" fill="rgb(239,221,27)" fg:x="12213236848" fg:w="181715472"/><text x="49.3321%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (59,071,579 samples, 0.24%)</title><rect x="49.8123%" y="373" width="0.2374%" height="15" fill="rgb(222,198,25)" fg:x="12394952320" fg:w="59071579"/><text x="50.0623%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (45,385,293 samples, 0.18%)</title><rect x="50.0497%" y="373" width="0.1824%" height="15" fill="rgb(211,99,13)" fg:x="12454023899" fg:w="45385293"/><text x="50.2997%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1,325,509,364 samples, 5.33%)</title><rect x="53.0991%" y="357" width="5.3269%" height="15" fill="rgb(232,111,31)" fg:x="13212808826" fg:w="1325509364"/><text x="53.3491%" y="367.50">&lt;core::..</text></g><g><title>__memcpy_avx_unaligned_erms (1,226,294,317 samples, 4.93%)</title><rect x="53.4978%" y="341" width="4.9282%" height="15" fill="rgb(245,82,37)" fg:x="13312023873" fg:w="1226294317"/><text x="53.7478%" y="351.50">__memc..</text></g><g><title>&lt;lux::value::Value as core::clone::Clone&gt;::clone (109,355,069 samples, 0.44%)</title><rect x="58.4260%" y="357" width="0.4395%" height="15" fill="rgb(227,149,46)" fg:x="14538318190" fg:w="109355069"/><text x="58.6760%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (204,854,809 samples, 0.82%)</title><rect x="58.8655%" y="357" width="0.8233%" height="15" fill="rgb(218,36,50)" fg:x="14647673259" fg:w="204854809"/><text x="59.1155%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;lux::value::Op&gt; (13,688,410 samples, 0.06%)</title><rect x="59.6887%" y="357" width="0.0550%" height="15" fill="rgb(226,80,48)" fg:x="14852528068" fg:w="13688410"/><text x="59.9387%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;lux::value::Value&gt; (41,106,719 samples, 0.17%)</title><rect x="59.7437%" y="357" width="0.1652%" height="15" fill="rgb(238,224,15)" fg:x="14866216478" fg:w="41106719"/><text x="59.9937%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (522,410,767 samples, 2.10%)</title><rect x="60.5306%" y="325" width="2.0994%" height="15" fill="rgb(241,136,10)" fg:x="15062011276" fg:w="522410767"/><text x="60.7806%" y="335.50">_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (9,109,081 samples, 0.04%)</title><rect x="62.6300%" y="325" width="0.0366%" height="15" fill="rgb(208,32,45)" fg:x="15584422043" fg:w="9109081"/><text x="62.8800%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (9,109,081 samples, 0.04%)</title><rect x="62.6300%" y="309" width="0.0366%" height="15" fill="rgb(207,135,9)" fg:x="15584422043" fg:w="9109081"/><text x="62.8800%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (9,109,081 samples, 0.04%)</title><rect x="62.6300%" y="293" width="0.0366%" height="15" fill="rgb(206,86,44)" fg:x="15584422043" fg:w="9109081"/><text x="62.8800%" y="303.50"></text></g><g><title>core::hint::assert_unchecked (421,985,316 samples, 1.70%)</title><rect x="62.6666%" y="325" width="1.6959%" height="15" fill="rgb(245,177,15)" fg:x="15593531124" fg:w="421985316"/><text x="62.9166%" y="335.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (376,565,590 samples, 1.51%)</title><rect x="62.8492%" y="309" width="1.5133%" height="15" fill="rgb(206,64,50)" fg:x="15638950850" fg:w="376565590"/><text x="63.0992%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (13,701,654 samples, 0.06%)</title><rect x="64.3625%" y="325" width="0.0551%" height="15" fill="rgb(234,36,40)" fg:x="16015516440" fg:w="13701654"/><text x="64.6125%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1,126,451,226 samples, 4.53%)</title><rect x="60.0919%" y="341" width="4.5269%" height="15" fill="rgb(213,64,8)" fg:x="14952850431" fg:w="1126451226"/><text x="60.3419%" y="351.50">alloc..</text></g><g><title>core::ptr::read (50,083,563 samples, 0.20%)</title><rect x="64.4176%" y="325" width="0.2013%" height="15" fill="rgb(210,75,36)" fg:x="16029218094" fg:w="50083563"/><text x="64.6676%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (50,083,563 samples, 0.20%)</title><rect x="64.4176%" y="309" width="0.2013%" height="15" fill="rgb(229,88,21)" fg:x="16029218094" fg:w="50083563"/><text x="64.6676%" y="319.50"></text></g><g><title>lux::prism::Prism::pop (1,875,011,262 samples, 7.54%)</title><rect x="59.9089%" y="357" width="7.5352%" height="15" fill="rgb(252,204,47)" fg:x="14907323197" fg:w="1875011262"/><text x="60.1589%" y="367.50">lux::prism..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (703,032,802 samples, 2.83%)</title><rect x="64.6188%" y="341" width="2.8253%" height="15" fill="rgb(208,77,27)" fg:x="16079301657" fg:w="703032802"/><text x="64.8688%" y="351.50">co..</text></g><g><title>__memcpy_avx_unaligned_erms (540,868,794 samples, 2.17%)</title><rect x="65.2705%" y="325" width="2.1736%" height="15" fill="rgb(221,76,26)" fg:x="16241465665" fg:w="540868794"/><text x="65.5205%" y="335.50">_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (22,703,722 samples, 0.09%)</title><rect x="68.0671%" y="341" width="0.0912%" height="15" fill="rgb(225,139,18)" fg:x="16937341832" fg:w="22703722"/><text x="68.3171%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (100,148,679 samples, 0.40%)</title><rect x="68.3413%" y="325" width="0.4025%" height="15" fill="rgb(230,137,11)" fg:x="17005567670" fg:w="100148679"/><text x="68.5913%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (18,121,494 samples, 0.07%)</title><rect x="68.7437%" y="325" width="0.0728%" height="15" fill="rgb(212,28,1)" fg:x="17105716349" fg:w="18121494"/><text x="68.9937%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (18,121,494 samples, 0.07%)</title><rect x="68.7437%" y="309" width="0.0728%" height="15" fill="rgb(248,164,17)" fg:x="17105716349" fg:w="18121494"/><text x="68.9937%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4,555,022 samples, 0.02%)</title><rect x="68.8166%" y="325" width="0.0183%" height="15" fill="rgb(222,171,42)" fg:x="17123837843" fg:w="4555022"/><text x="69.0666%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4,555,022 samples, 0.02%)</title><rect x="68.8166%" y="309" width="0.0183%" height="15" fill="rgb(243,84,45)" fg:x="17123837843" fg:w="4555022"/><text x="69.0666%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (4,555,022 samples, 0.02%)</title><rect x="68.8166%" y="293" width="0.0183%" height="15" fill="rgb(252,49,23)" fg:x="17123837843" fg:w="4555022"/><text x="69.0666%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4,555,022 samples, 0.02%)</title><rect x="68.8166%" y="277" width="0.0183%" height="15" fill="rgb(215,19,7)" fg:x="17123837843" fg:w="4555022"/><text x="69.0666%" y="287.50"></text></g><g><title>lux::prism::Prism::binary_op (4,824,310,524 samples, 19.39%)</title><rect x="50.2321%" y="373" width="19.3877%" height="15" fill="rgb(238,81,41)" fg:x="12499409192" fg:w="4824310524"/><text x="50.4821%" y="383.50">lux::prism::Prism::binary_op</text></g><g><title>lux::prism::Prism::push (541,385,257 samples, 2.18%)</title><rect x="67.4442%" y="357" width="2.1757%" height="15" fill="rgb(210,199,37)" fg:x="16782334459" fg:w="541385257"/><text x="67.6942%" y="367.50">l..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (363,674,162 samples, 1.46%)</title><rect x="68.1583%" y="341" width="1.4615%" height="15" fill="rgb(244,192,49)" fg:x="16960045554" fg:w="363674162"/><text x="68.4083%" y="351.50"></text></g><g><title>core::ptr::write (195,326,851 samples, 0.78%)</title><rect x="68.8349%" y="325" width="0.7850%" height="15" fill="rgb(226,211,11)" fg:x="17128392865" fg:w="195326851"/><text x="69.0849%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (195,326,851 samples, 0.78%)</title><rect x="68.8349%" y="309" width="0.7850%" height="15" fill="rgb(236,162,54)" fg:x="17128392865" fg:w="195326851"/><text x="69.0849%" y="319.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (154,764,493 samples, 0.62%)</title><rect x="71.4281%" y="277" width="0.6220%" height="15" fill="rgb(220,229,9)" fg:x="17773677859" fg:w="154764493"/><text x="71.6781%" y="287.50"></text></g><g><title>core::fmt::Arguments::new_const (18,025,804 samples, 0.07%)</title><rect x="74.0227%" y="229" width="0.0724%" height="15" fill="rgb(250,87,22)" fg:x="18419291395" fg:w="18025804"/><text x="74.2727%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1,080,555,220 samples, 4.34%)</title><rect x="70.5534%" y="341" width="4.3425%" height="15" fill="rgb(239,43,17)" fg:x="17556014534" fg:w="1080555220"/><text x="70.8034%" y="351.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (1,080,555,220 samples, 4.34%)</title><rect x="70.5534%" y="325" width="4.3425%" height="15" fill="rgb(231,177,25)" fg:x="17556014534" fg:w="1080555220"/><text x="70.8034%" y="335.50">alloc..</text></g><g><title>core::slice::raw::from_raw_parts_mut (1,017,378,326 samples, 4.09%)</title><rect x="70.8073%" y="309" width="4.0886%" height="15" fill="rgb(219,179,1)" fg:x="17619191428" fg:w="1017378326"/><text x="71.0573%" y="319.50">core..</text></g><g><title>core::slice::raw::from_raw_parts_mut::precondition_check (971,944,662 samples, 3.91%)</title><rect x="70.9899%" y="293" width="3.9060%" height="15" fill="rgb(238,219,53)" fg:x="17664625092" fg:w="971944662"/><text x="71.2399%" y="303.50">core..</text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (708,127,402 samples, 2.85%)</title><rect x="72.0501%" y="277" width="2.8458%" height="15" fill="rgb(232,167,36)" fg:x="17928442352" fg:w="708127402"/><text x="72.3001%" y="287.50">co..</text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (703,623,579 samples, 2.83%)</title><rect x="72.0682%" y="261" width="2.8277%" height="15" fill="rgb(244,19,51)" fg:x="17932946175" fg:w="703623579"/><text x="72.3182%" y="271.50">co..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (653,749,831 samples, 2.63%)</title><rect x="72.2686%" y="245" width="2.6273%" height="15" fill="rgb(224,6,22)" fg:x="17982819923" fg:w="653749831"/><text x="72.5186%" y="255.50">co..</text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (199,252,555 samples, 0.80%)</title><rect x="74.0951%" y="229" width="0.8007%" height="15" fill="rgb(224,145,5)" fg:x="18437317199" fg:w="199252555"/><text x="74.3451%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (199,252,555 samples, 0.80%)</title><rect x="74.0951%" y="213" width="0.8007%" height="15" fill="rgb(234,130,49)" fg:x="18437317199" fg:w="199252555"/><text x="74.3451%" y="223.50"></text></g><g><title>&lt;&amp;mut alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1,212,225,014 samples, 4.87%)</title><rect x="70.2787%" y="357" width="4.8716%" height="15" fill="rgb(254,6,2)" fg:x="17487664709" fg:w="1212225014"/><text x="70.5287%" y="367.50">&lt;&amp;mut ..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (63,319,969 samples, 0.25%)</title><rect x="74.8959%" y="341" width="0.2545%" height="15" fill="rgb(208,96,46)" fg:x="18636569754" fg:w="63319969"/><text x="75.1459%" y="351.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (63,319,969 samples, 0.25%)</title><rect x="74.8959%" y="325" width="0.2545%" height="15" fill="rgb(239,3,39)" fg:x="18636569754" fg:w="63319969"/><text x="75.1459%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (58,756,132 samples, 0.24%)</title><rect x="74.9142%" y="309" width="0.2361%" height="15" fill="rgb(233,210,1)" fg:x="18641133591" fg:w="58756132"/><text x="75.1642%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (529,009,769 samples, 2.13%)</title><rect x="79.7379%" y="341" width="2.1260%" height="15" fill="rgb(244,137,37)" fg:x="19841413189" fg:w="529009769"/><text x="79.9879%" y="351.50">&lt;..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast (50,077,477 samples, 0.20%)</title><rect x="82.1198%" y="309" width="0.2012%" height="15" fill="rgb(240,136,2)" fg:x="20434127512" fg:w="50077477"/><text x="82.3698%" y="319.50"></text></g><g><title>lux::prism::Prism::close_upvalues (3,165,037,909 samples, 12.72%)</title><rect x="69.6199%" y="373" width="12.7195%" height="15" fill="rgb(239,18,37)" fg:x="17323719716" fg:w="3165037909"/><text x="69.8699%" y="383.50">lux::prism::Prism::..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,788,867,902 samples, 7.19%)</title><rect x="75.1503%" y="357" width="7.1890%" height="15" fill="rgb(218,185,22)" fg:x="18699889723" fg:w="1788867902"/><text x="75.4003%" y="367.50">&lt;core::sli..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (118,334,667 samples, 0.48%)</title><rect x="81.8638%" y="341" width="0.4756%" height="15" fill="rgb(225,218,4)" fg:x="20370422958" fg:w="118334667"/><text x="82.1138%" y="351.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (118,334,667 samples, 0.48%)</title><rect x="81.8638%" y="325" width="0.4756%" height="15" fill="rgb(230,182,32)" fg:x="20370422958" fg:w="118334667"/><text x="82.1138%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (4,552,636 samples, 0.02%)</title><rect x="82.3211%" y="309" width="0.0183%" height="15" fill="rgb(242,56,43)" fg:x="20484204989" fg:w="4552636"/><text x="82.5711%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (59,022,766 samples, 0.24%)</title><rect x="82.5222%" y="341" width="0.2372%" height="15" fill="rgb(233,99,24)" fg:x="20534247483" fg:w="59022766"/><text x="82.7722%" y="351.50"></text></g><g><title>core::hint::assert_unchecked (90,854,686 samples, 0.37%)</title><rect x="82.7594%" y="341" width="0.3651%" height="15" fill="rgb(234,209,42)" fg:x="20593270249" fg:w="90854686"/><text x="83.0094%" y="351.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (63,491,406 samples, 0.26%)</title><rect x="82.8694%" y="325" width="0.2552%" height="15" fill="rgb(227,7,12)" fg:x="20620633529" fg:w="63491406"/><text x="83.1194%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (195,414,075 samples, 0.79%)</title><rect x="82.3575%" y="357" width="0.7853%" height="15" fill="rgb(245,203,43)" fg:x="20493277994" fg:w="195414075"/><text x="82.6075%" y="367.50"></text></g><g><title>core::ptr::read (4,567,134 samples, 0.02%)</title><rect x="83.1245%" y="341" width="0.0184%" height="15" fill="rgb(238,205,33)" fg:x="20684124935" fg:w="4567134"/><text x="83.3745%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4,567,134 samples, 0.02%)</title><rect x="83.1245%" y="325" width="0.0184%" height="15" fill="rgb(231,56,7)" fg:x="20684124935" fg:w="4567134"/><text x="83.3745%" y="335.50"></text></g><g><title>lux::prism::Prism::pop (327,000,691 samples, 1.31%)</title><rect x="82.3394%" y="373" width="1.3141%" height="15" fill="rgb(244,186,29)" fg:x="20488757625" fg:w="327000691"/><text x="82.5894%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (127,066,247 samples, 0.51%)</title><rect x="83.1429%" y="357" width="0.5106%" height="15" fill="rgb(234,111,31)" fg:x="20688692069" fg:w="127066247"/><text x="83.3929%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (104,283,789 samples, 0.42%)</title><rect x="83.2344%" y="341" width="0.4191%" height="15" fill="rgb(241,149,10)" fg:x="20711474527" fg:w="104283789"/><text x="83.4844%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (62,430,240 samples, 0.25%)</title><rect x="84.9469%" y="357" width="0.2509%" height="15" fill="rgb(249,206,44)" fg:x="21137599416" fg:w="62430240"/><text x="85.1969%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (295,573,500 samples, 1.19%)</title><rect x="85.5085%" y="341" width="1.1878%" height="15" fill="rgb(251,153,30)" fg:x="21277336363" fg:w="295573500"/><text x="85.7585%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (27,224,904 samples, 0.11%)</title><rect x="86.7146%" y="325" width="0.1094%" height="15" fill="rgb(239,152,38)" fg:x="21577468119" fg:w="27224904"/><text x="86.9646%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (40,932,051 samples, 0.16%)</title><rect x="86.6963%" y="341" width="0.1645%" height="15" fill="rgb(249,139,47)" fg:x="21572909863" fg:w="40932051"/><text x="86.9463%" y="351.50"></text></g><g><title>core::mem::size_of (9,148,891 samples, 0.04%)</title><rect x="86.8240%" y="325" width="0.0368%" height="15" fill="rgb(244,64,35)" fg:x="21604693023" fg:w="9148891"/><text x="87.0740%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4,621,137 samples, 0.02%)</title><rect x="86.8608%" y="341" width="0.0186%" height="15" fill="rgb(216,46,15)" fg:x="21613841914" fg:w="4621137"/><text x="87.1108%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4,621,137 samples, 0.02%)</title><rect x="86.8608%" y="325" width="0.0186%" height="15" fill="rgb(250,74,19)" fg:x="21613841914" fg:w="4621137"/><text x="87.1108%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (4,621,137 samples, 0.02%)</title><rect x="86.8608%" y="309" width="0.0186%" height="15" fill="rgb(249,42,33)" fg:x="21613841914" fg:w="4621137"/><text x="87.1108%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (4,621,137 samples, 0.02%)</title><rect x="86.8608%" y="293" width="0.0186%" height="15" fill="rgb(242,149,17)" fg:x="21613841914" fg:w="4621137"/><text x="87.1108%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (22,746,039 samples, 0.09%)</title><rect x="86.8794%" y="341" width="0.0914%" height="15" fill="rgb(244,29,21)" fg:x="21618463051" fg:w="22746039"/><text x="87.1294%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (526,383,101 samples, 2.12%)</title><rect x="86.9708%" y="325" width="2.1154%" height="15" fill="rgb(220,130,37)" fg:x="21641209090" fg:w="526383101"/><text x="87.2208%" y="335.50">_..</text></g><g><title>lux::prism::Prism::push (1,360,950,567 samples, 5.47%)</title><rect x="83.6535%" y="373" width="5.4693%" height="15" fill="rgb(211,67,2)" fg:x="20815758316" fg:w="1360950567"/><text x="83.9035%" y="383.50">lux::pr..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (976,679,227 samples, 3.93%)</title><rect x="85.1978%" y="357" width="3.9250%" height="15" fill="rgb(235,68,52)" fg:x="21200029656" fg:w="976679227"/><text x="85.4478%" y="367.50">allo..</text></g><g><title>core::ptr::write (535,499,793 samples, 2.15%)</title><rect x="86.9708%" y="341" width="2.1520%" height="15" fill="rgb(246,142,3)" fg:x="21641209090" fg:w="535499793"/><text x="87.2208%" y="351.50">c..</text></g><g><title>memcpy@plt (9,116,692 samples, 0.04%)</title><rect x="89.0862%" y="325" width="0.0366%" height="15" fill="rgb(241,25,7)" fg:x="22167592191" fg:w="9116692"/><text x="89.3362%" y="335.50"></text></g><g><title>memcpy@plt (17,975,980 samples, 0.07%)</title><rect x="89.1228%" y="373" width="0.0722%" height="15" fill="rgb(242,119,39)" fg:x="22176708883" fg:w="17975980"/><text x="89.3728%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (127,335,602 samples, 0.51%)</title><rect x="89.7425%" y="245" width="0.5117%" height="15" fill="rgb(241,98,45)" fg:x="22330910962" fg:w="127335602"/><text x="89.9925%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,569,499 samples, 0.02%)</title><rect x="90.2359%" y="229" width="0.0184%" height="15" fill="rgb(254,28,30)" fg:x="22453677065" fg:w="4569499"/><text x="90.4859%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (590,708,816 samples, 2.37%)</title><rect x="89.3232%" y="293" width="2.3739%" height="15" fill="rgb(241,142,54)" fg:x="22226569884" fg:w="590708816"/><text x="89.5732%" y="303.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (581,614,468 samples, 2.34%)</title><rect x="89.3598%" y="277" width="2.3374%" height="15" fill="rgb(222,85,15)" fg:x="22235664232" fg:w="581614468"/><text x="89.6098%" y="287.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (581,614,468 samples, 2.34%)</title><rect x="89.3598%" y="261" width="2.3374%" height="15" fill="rgb(210,85,47)" fg:x="22235664232" fg:w="581614468"/><text x="89.6098%" y="271.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (359,032,136 samples, 1.44%)</title><rect x="90.2543%" y="245" width="1.4429%" height="15" fill="rgb(224,206,25)" fg:x="22458246564" fg:w="359032136"/><text x="90.5043%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9,087,732 samples, 0.04%)</title><rect x="91.6606%" y="229" width="0.0365%" height="15" fill="rgb(243,201,19)" fg:x="22808190968" fg:w="9087732"/><text x="91.9106%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (94,840,753 samples, 0.38%)</title><rect x="91.7697%" y="277" width="0.3811%" height="15" fill="rgb(236,59,4)" fg:x="22835329083" fg:w="94840753"/><text x="92.0197%" y="287.50"></text></g><g><title>__memcpy_avx_unaligned_erms (67,797,598 samples, 0.27%)</title><rect x="92.1508%" y="261" width="0.2725%" height="15" fill="rgb(254,179,45)" fg:x="22930169836" fg:w="67797598"/><text x="92.4008%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (31,874,641 samples, 0.13%)</title><rect x="92.5327%" y="245" width="0.1281%" height="15" fill="rgb(226,14,10)" fg:x="23025186753" fg:w="31874641"/><text x="92.7827%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (68,246,329 samples, 0.27%)</title><rect x="92.4233%" y="261" width="0.2743%" height="15" fill="rgb(244,27,41)" fg:x="22997967434" fg:w="68246329"/><text x="92.6733%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (9,152,369 samples, 0.04%)</title><rect x="92.6608%" y="245" width="0.0368%" height="15" fill="rgb(235,35,32)" fg:x="23057061394" fg:w="9152369"/><text x="92.9108%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (253,508,080 samples, 1.02%)</title><rect x="91.6971%" y="293" width="1.0188%" height="15" fill="rgb(218,68,31)" fg:x="22817278700" fg:w="253508080"/><text x="91.9471%" y="303.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (140,616,944 samples, 0.57%)</title><rect x="92.1508%" y="277" width="0.5651%" height="15" fill="rgb(207,120,37)" fg:x="22930169836" fg:w="140616944"/><text x="92.4008%" y="287.50"></text></g><g><title>memcpy@plt (4,573,017 samples, 0.02%)</title><rect x="92.6975%" y="261" width="0.0184%" height="15" fill="rgb(227,98,0)" fg:x="23066213763" fg:w="4573017"/><text x="92.9475%" y="271.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (13,602,956 samples, 0.05%)</title><rect x="92.7524%" y="181" width="0.0547%" height="15" fill="rgb(207,7,3)" fg:x="23079856389" fg:w="13602956"/><text x="93.0024%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (36,229,096 samples, 0.15%)</title><rect x="92.7159%" y="261" width="0.1456%" height="15" fill="rgb(206,98,19)" fg:x="23070786780" fg:w="36229096"/><text x="92.9659%" y="271.50"></text></g><g><title>alloc::string::String::as_str (36,229,096 samples, 0.15%)</title><rect x="92.7159%" y="245" width="0.1456%" height="15" fill="rgb(217,5,26)" fg:x="23070786780" fg:w="36229096"/><text x="92.9659%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (36,229,096 samples, 0.15%)</title><rect x="92.7159%" y="229" width="0.1456%" height="15" fill="rgb(235,190,38)" fg:x="23070786780" fg:w="36229096"/><text x="92.9659%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts (36,229,096 samples, 0.15%)</title><rect x="92.7159%" y="213" width="0.1456%" height="15" fill="rgb(247,86,24)" fg:x="23070786780" fg:w="36229096"/><text x="92.9659%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (27,159,487 samples, 0.11%)</title><rect x="92.7524%" y="197" width="0.1091%" height="15" fill="rgb(205,101,16)" fg:x="23079856389" fg:w="27159487"/><text x="93.0024%" y="207.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (13,556,531 samples, 0.05%)</title><rect x="92.8070%" y="181" width="0.0545%" height="15" fill="rgb(246,168,33)" fg:x="23093459345" fg:w="13556531"/><text x="93.0570%" y="191.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (13,556,531 samples, 0.05%)</title><rect x="92.8070%" y="165" width="0.0545%" height="15" fill="rgb(231,114,1)" fg:x="23093459345" fg:w="13556531"/><text x="93.0570%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (9,017,826 samples, 0.04%)</title><rect x="92.8253%" y="149" width="0.0362%" height="15" fill="rgb(207,184,53)" fg:x="23097998050" fg:w="9017826"/><text x="93.0753%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (9,017,826 samples, 0.04%)</title><rect x="92.8253%" y="133" width="0.0362%" height="15" fill="rgb(224,95,51)" fg:x="23097998050" fg:w="9017826"/><text x="93.0753%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (9,017,826 samples, 0.04%)</title><rect x="92.8253%" y="117" width="0.0362%" height="15" fill="rgb(212,188,45)" fg:x="23097998050" fg:w="9017826"/><text x="93.0753%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (45,396,813 samples, 0.18%)</title><rect x="93.7224%" y="101" width="0.1824%" height="15" fill="rgb(223,154,38)" fg:x="23321238273" fg:w="45396813"/><text x="93.9724%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (18,211,738 samples, 0.07%)</title><rect x="93.8317%" y="85" width="0.0732%" height="15" fill="rgb(251,22,52)" fg:x="23348423348" fg:w="18211738"/><text x="94.0817%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (18,211,738 samples, 0.07%)</title><rect x="93.8317%" y="69" width="0.0732%" height="15" fill="rgb(229,209,22)" fg:x="23348423348" fg:w="18211738"/><text x="94.0817%" y="79.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (68,159,247 samples, 0.27%)</title><rect x="93.6676%" y="133" width="0.2739%" height="15" fill="rgb(234,138,34)" fg:x="23307599312" fg:w="68159247"/><text x="93.9176%" y="143.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (68,159,247 samples, 0.27%)</title><rect x="93.6676%" y="117" width="0.2739%" height="15" fill="rgb(212,95,11)" fg:x="23307599312" fg:w="68159247"/><text x="93.9176%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (9,123,473 samples, 0.04%)</title><rect x="93.9049%" y="101" width="0.0367%" height="15" fill="rgb(240,179,47)" fg:x="23366635086" fg:w="9123473"/><text x="94.1549%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null::runtime (9,123,473 samples, 0.04%)</title><rect x="93.9049%" y="85" width="0.0367%" height="15" fill="rgb(240,163,11)" fg:x="23366635086" fg:w="9123473"/><text x="94.1549%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (140,963,391 samples, 0.57%)</title><rect x="93.4297%" y="165" width="0.5665%" height="15" fill="rgb(236,37,12)" fg:x="23248388445" fg:w="140963391"/><text x="93.6797%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (127,279,772 samples, 0.51%)</title><rect x="93.4847%" y="149" width="0.5115%" height="15" fill="rgb(232,164,16)" fg:x="23262072064" fg:w="127279772"/><text x="93.7347%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (13,593,277 samples, 0.05%)</title><rect x="93.9415%" y="133" width="0.0546%" height="15" fill="rgb(244,205,15)" fg:x="23375758559" fg:w="13593277"/><text x="94.1915%" y="143.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (13,593,277 samples, 0.05%)</title><rect x="93.9415%" y="117" width="0.0546%" height="15" fill="rgb(223,117,47)" fg:x="23375758559" fg:w="13593277"/><text x="94.1915%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (240,823,883 samples, 0.97%)</title><rect x="93.0467%" y="181" width="0.9678%" height="15" fill="rgb(244,107,35)" fg:x="23153090571" fg:w="240823883"/><text x="93.2967%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (4,562,618 samples, 0.02%)</title><rect x="93.9962%" y="165" width="0.0183%" height="15" fill="rgb(205,140,8)" fg:x="23389351836" fg:w="4562618"/><text x="94.2462%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4,562,618 samples, 0.02%)</title><rect x="93.9962%" y="149" width="0.0183%" height="15" fill="rgb(228,84,46)" fg:x="23389351836" fg:w="4562618"/><text x="94.2462%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (282,290,529 samples, 1.13%)</title><rect x="92.8981%" y="197" width="1.1345%" height="15" fill="rgb(254,188,9)" fg:x="23116114089" fg:w="282290529"/><text x="93.1481%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,490,164 samples, 0.02%)</title><rect x="94.0145%" y="181" width="0.0180%" height="15" fill="rgb(206,112,54)" fg:x="23393914454" fg:w="4490164"/><text x="94.2645%" y="191.50"></text></g><g><title>core::cmp::min (68,023,758 samples, 0.27%)</title><rect x="94.2158%" y="165" width="0.2734%" height="15" fill="rgb(216,84,49)" fg:x="23444014950" fg:w="68023758"/><text x="94.4658%" y="175.50"></text></g><g><title>core::cmp::Ord::min (68,023,758 samples, 0.27%)</title><rect x="94.2158%" y="149" width="0.2734%" height="15" fill="rgb(214,194,35)" fg:x="23444014950" fg:w="68023758"/><text x="94.4658%" y="159.50"></text></g><g><title>core::cmp::min_by (68,023,758 samples, 0.27%)</title><rect x="94.2158%" y="133" width="0.2734%" height="15" fill="rgb(249,28,3)" fg:x="23444014950" fg:w="68023758"/><text x="94.4658%" y="143.50"></text></g><g><title>core::ops::function::FnOnce::call_once (36,103,298 samples, 0.15%)</title><rect x="94.3441%" y="117" width="0.1451%" height="15" fill="rgb(222,56,52)" fg:x="23475935410" fg:w="36103298"/><text x="94.5941%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (8,794,808 samples, 0.04%)</title><rect x="94.4539%" y="101" width="0.0353%" height="15" fill="rgb(245,217,50)" fg:x="23503243900" fg:w="8794808"/><text x="94.7039%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (1,362,578,426 samples, 5.48%)</title><rect x="89.3232%" y="325" width="5.4759%" height="15" fill="rgb(213,201,24)" fg:x="22226569884" fg:w="1362578426"/><text x="89.5732%" y="335.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (1,362,578,426 samples, 5.48%)</title><rect x="89.3232%" y="309" width="5.4759%" height="15" fill="rgb(248,116,28)" fg:x="22226569884" fg:w="1362578426"/><text x="89.5732%" y="319.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (518,361,530 samples, 2.08%)</title><rect x="92.7159%" y="293" width="2.0832%" height="15" fill="rgb(219,72,43)" fg:x="23070786780" fg:w="518361530"/><text x="92.9659%" y="303.50">c..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (518,361,530 samples, 2.08%)</title><rect x="92.7159%" y="277" width="2.0832%" height="15" fill="rgb(209,138,14)" fg:x="23070786780" fg:w="518361530"/><text x="92.9659%" y="287.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (482,132,434 samples, 1.94%)</title><rect x="92.8615%" y="261" width="1.9376%" height="15" fill="rgb(222,18,33)" fg:x="23107015876" fg:w="482132434"/><text x="93.1115%" y="271.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (477,607,571 samples, 1.92%)</title><rect x="92.8797%" y="245" width="1.9194%" height="15" fill="rgb(213,199,7)" fg:x="23111540739" fg:w="477607571"/><text x="93.1297%" y="255.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (477,607,571 samples, 1.92%)</title><rect x="92.8797%" y="229" width="1.9194%" height="15" fill="rgb(250,110,10)" fg:x="23111540739" fg:w="477607571"/><text x="93.1297%" y="239.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (477,607,571 samples, 1.92%)</title><rect x="92.8797%" y="213" width="1.9194%" height="15" fill="rgb(248,123,6)" fg:x="23111540739" fg:w="477607571"/><text x="93.1297%" y="223.50">&lt;..</text></g><g><title>core::hash::Hasher::write_u8 (190,743,692 samples, 0.77%)</title><rect x="94.0325%" y="197" width="0.7666%" height="15" fill="rgb(206,91,31)" fg:x="23398404618" fg:w="190743692"/><text x="94.2825%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (186,177,420 samples, 0.75%)</title><rect x="94.0509%" y="181" width="0.7482%" height="15" fill="rgb(211,154,13)" fg:x="23402970890" fg:w="186177420"/><text x="94.3009%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (77,109,602 samples, 0.31%)</title><rect x="94.4892%" y="165" width="0.3099%" height="15" fill="rgb(225,148,7)" fg:x="23512038708" fg:w="77109602"/><text x="94.7392%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (13,575,870 samples, 0.05%)</title><rect x="94.7445%" y="149" width="0.0546%" height="15" fill="rgb(220,160,43)" fg:x="23575572440" fg:w="13575870"/><text x="94.9945%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (13,575,870 samples, 0.05%)</title><rect x="94.7445%" y="133" width="0.0546%" height="15" fill="rgb(213,52,39)" fg:x="23575572440" fg:w="13575870"/><text x="94.9945%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4,546,317 samples, 0.02%)</title><rect x="94.7808%" y="117" width="0.0183%" height="15" fill="rgb(243,137,7)" fg:x="23584601993" fg:w="4546317"/><text x="95.0308%" y="127.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (13,578,989 samples, 0.05%)</title><rect x="94.8719%" y="309" width="0.0546%" height="15" fill="rgb(230,79,13)" fg:x="23607275969" fg:w="13578989"/><text x="95.1219%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13,578,989 samples, 0.05%)</title><rect x="94.8719%" y="293" width="0.0546%" height="15" fill="rgb(247,105,23)" fg:x="23607275969" fg:w="13578989"/><text x="95.1219%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (9,005,498 samples, 0.04%)</title><rect x="94.8903%" y="277" width="0.0362%" height="15" fill="rgb(223,179,41)" fg:x="23611849460" fg:w="9005498"/><text x="95.1403%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4,572,732 samples, 0.02%)</title><rect x="95.1095%" y="261" width="0.0184%" height="15" fill="rgb(218,9,34)" fg:x="23666386696" fg:w="4572732"/><text x="95.3595%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (22,804,450 samples, 0.09%)</title><rect x="95.0546%" y="293" width="0.0916%" height="15" fill="rgb(222,106,8)" fg:x="23652721830" fg:w="22804450"/><text x="95.3046%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (22,804,450 samples, 0.09%)</title><rect x="95.0546%" y="277" width="0.0916%" height="15" fill="rgb(211,220,0)" fg:x="23652721830" fg:w="22804450"/><text x="95.3046%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4,566,852 samples, 0.02%)</title><rect x="95.1279%" y="261" width="0.0184%" height="15" fill="rgb(229,52,16)" fg:x="23670959428" fg:w="4566852"/><text x="95.3779%" y="271.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (13,512,116 samples, 0.05%)</title><rect x="95.3654%" y="261" width="0.0543%" height="15" fill="rgb(212,155,18)" fg:x="23730054618" fg:w="13512116"/><text x="95.6154%" y="271.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (27,211,117 samples, 0.11%)</title><rect x="95.3287%" y="277" width="0.1094%" height="15" fill="rgb(242,21,14)" fg:x="23720934846" fg:w="27211117"/><text x="95.5787%" y="287.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::remove_lowest_bit (4,579,229 samples, 0.02%)</title><rect x="95.4197%" y="261" width="0.0184%" height="15" fill="rgb(222,19,48)" fg:x="23743566734" fg:w="4579229"/><text x="95.6697%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (4,579,259 samples, 0.02%)</title><rect x="95.9845%" y="245" width="0.0184%" height="15" fill="rgb(232,45,27)" fg:x="23884103931" fg:w="4579259"/><text x="96.2345%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (9,043,107 samples, 0.04%)</title><rect x="96.4405%" y="181" width="0.0363%" height="15" fill="rgb(249,103,42)" fg:x="23997576827" fg:w="9043107"/><text x="96.6905%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (9,043,107 samples, 0.04%)</title><rect x="96.4405%" y="165" width="0.0363%" height="15" fill="rgb(246,81,33)" fg:x="23997576827" fg:w="9043107"/><text x="96.6905%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (9,043,107 samples, 0.04%)</title><rect x="96.4405%" y="149" width="0.0363%" height="15" fill="rgb(252,33,42)" fg:x="23997576827" fg:w="9043107"/><text x="96.6905%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (18,150,275 samples, 0.07%)</title><rect x="96.4222%" y="213" width="0.0729%" height="15" fill="rgb(209,212,41)" fg:x="23993032424" fg:w="18150275"/><text x="96.6722%" y="223.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (18,150,275 samples, 0.07%)</title><rect x="96.4222%" y="197" width="0.0729%" height="15" fill="rgb(207,154,6)" fg:x="23993032424" fg:w="18150275"/><text x="96.6722%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (4,562,765 samples, 0.02%)</title><rect x="96.4768%" y="181" width="0.0183%" height="15" fill="rgb(223,64,47)" fg:x="24006619934" fg:w="4562765"/><text x="96.7268%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null::runtime (4,562,765 samples, 0.02%)</title><rect x="96.4768%" y="165" width="0.0183%" height="15" fill="rgb(211,161,38)" fg:x="24006619934" fg:w="4562765"/><text x="96.7268%" y="175.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (290,093,887 samples, 1.17%)</title><rect x="95.4381%" y="277" width="1.1658%" height="15" fill="rgb(219,138,40)" fg:x="23748145963" fg:w="290093887"/><text x="95.6881%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (239,711,918 samples, 0.96%)</title><rect x="95.6405%" y="261" width="0.9633%" height="15" fill="rgb(241,228,46)" fg:x="23798527932" fg:w="239711918"/><text x="95.8905%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (149,556,660 samples, 0.60%)</title><rect x="96.0029%" y="245" width="0.6010%" height="15" fill="rgb(223,209,38)" fg:x="23888683190" fg:w="149556660"/><text x="96.2529%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (149,556,660 samples, 0.60%)</title><rect x="96.0029%" y="229" width="0.6010%" height="15" fill="rgb(236,164,45)" fg:x="23888683190" fg:w="149556660"/><text x="96.2529%" y="239.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (27,057,151 samples, 0.11%)</title><rect x="96.4952%" y="213" width="0.1087%" height="15" fill="rgb(231,15,5)" fg:x="24011182699" fg:w="27057151"/><text x="96.7452%" y="223.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (22,501,665 samples, 0.09%)</title><rect x="96.5135%" y="197" width="0.0904%" height="15" fill="rgb(252,35,15)" fg:x="24015738185" fg:w="22501665"/><text x="96.7635%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (177,459,147 samples, 0.71%)</title><rect x="96.7684%" y="261" width="0.7132%" height="15" fill="rgb(248,181,18)" fg:x="24079186184" fg:w="177459147"/><text x="97.0184%" y="271.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (100,216,910 samples, 0.40%)</title><rect x="97.0789%" y="245" width="0.4027%" height="15" fill="rgb(233,39,42)" fg:x="24156428421" fg:w="100216910"/><text x="97.3289%" y="255.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (54,612,481 samples, 0.22%)</title><rect x="97.2621%" y="229" width="0.2195%" height="15" fill="rgb(238,110,33)" fg:x="24202032850" fg:w="54612481"/><text x="97.5121%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (174,444,686 samples, 0.70%)</title><rect x="97.4816%" y="261" width="0.7011%" height="15" fill="rgb(233,195,10)" fg:x="24256645331" fg:w="174444686"/><text x="97.7316%" y="271.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (72,820,694 samples, 0.29%)</title><rect x="97.8900%" y="245" width="0.2926%" height="15" fill="rgb(254,105,3)" fg:x="24358269323" fg:w="72820694"/><text x="98.1400%" y="255.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (27,186,083 samples, 0.11%)</title><rect x="98.0734%" y="229" width="0.1093%" height="15" fill="rgb(221,225,9)" fg:x="24403903934" fg:w="27186083"/><text x="98.3234%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (565,179,696 samples, 2.27%)</title><rect x="96.6039%" y="277" width="2.2713%" height="15" fill="rgb(224,227,45)" fg:x="24038239850" fg:w="565179696"/><text x="96.8539%" y="287.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (172,329,529 samples, 0.69%)</title><rect x="98.1827%" y="261" width="0.6926%" height="15" fill="rgb(229,198,43)" fg:x="24431090017" fg:w="172329529"/><text x="98.4327%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (158,842,078 samples, 0.64%)</title><rect x="98.2369%" y="245" width="0.6383%" height="15" fill="rgb(206,209,35)" fg:x="24444577468" fg:w="158842078"/><text x="98.4869%" y="255.50"></text></g><g><title>core::core_arch::simd::i8x16::new (81,702,478 samples, 0.33%)</title><rect x="98.5469%" y="229" width="0.3283%" height="15" fill="rgb(245,195,53)" fg:x="24521717068" fg:w="81702478"/><text x="98.7969%" y="239.50"></text></g><g><title>hashbrown::control::tag::Tag::full (4,555,559 samples, 0.02%)</title><rect x="98.8752%" y="277" width="0.0183%" height="15" fill="rgb(240,92,26)" fg:x="24603419546" fg:w="4555559"/><text x="99.1252%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (22,818,923 samples, 0.09%)</title><rect x="99.1686%" y="133" width="0.0917%" height="15" fill="rgb(207,40,23)" fg:x="24676426936" fg:w="22818923"/><text x="99.4186%" y="143.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (8,808,296 samples, 0.04%)</title><rect x="99.3887%" y="101" width="0.0354%" height="15" fill="rgb(223,111,35)" fg:x="24731192114" fg:w="8808296"/><text x="99.6387%" y="111.50"></text></g><g><title>core::fmt::Arguments::new_const (9,138,409 samples, 0.04%)</title><rect x="99.6616%" y="53" width="0.0367%" height="15" fill="rgb(229,147,28)" fg:x="24799111311" fg:w="9138409"/><text x="99.9116%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (168,295,600 samples, 0.68%)</title><rect x="99.1135%" y="165" width="0.6763%" height="15" fill="rgb(211,29,28)" fg:x="24662725368" fg:w="168295600"/><text x="99.3635%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (168,295,600 samples, 0.68%)</title><rect x="99.1135%" y="149" width="0.6763%" height="15" fill="rgb(228,72,33)" fg:x="24662725368" fg:w="168295600"/><text x="99.3635%" y="159.50"></text></g><g><title>core::slice::raw::from_raw_parts (131,775,109 samples, 0.53%)</title><rect x="99.2603%" y="133" width="0.5296%" height="15" fill="rgb(205,214,31)" fg:x="24699245859" fg:w="131775109"/><text x="99.5103%" y="143.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (122,649,750 samples, 0.49%)</title><rect x="99.2970%" y="117" width="0.4929%" height="15" fill="rgb(224,111,15)" fg:x="24708371218" fg:w="122649750"/><text x="99.5470%" y="127.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (91,020,558 samples, 0.37%)</title><rect x="99.4241%" y="101" width="0.3658%" height="15" fill="rgb(253,21,26)" fg:x="24740000410" fg:w="91020558"/><text x="99.6741%" y="111.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (91,020,558 samples, 0.37%)</title><rect x="99.4241%" y="85" width="0.3658%" height="15" fill="rgb(245,139,43)" fg:x="24740000410" fg:w="91020558"/><text x="99.6741%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (81,903,484 samples, 0.33%)</title><rect x="99.4607%" y="69" width="0.3292%" height="15" fill="rgb(252,170,7)" fg:x="24749117484" fg:w="81903484"/><text x="99.7107%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (22,771,248 samples, 0.09%)</title><rect x="99.6984%" y="53" width="0.0915%" height="15" fill="rgb(231,118,14)" fg:x="24808249720" fg:w="22771248"/><text x="99.9484%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (22,771,248 samples, 0.09%)</title><rect x="99.6984%" y="37" width="0.0915%" height="15" fill="rgb(238,83,0)" fg:x="24808249720" fg:w="22771248"/><text x="99.9484%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (177,450,046 samples, 0.71%)</title><rect x="99.0951%" y="181" width="0.7131%" height="15" fill="rgb(221,39,39)" fg:x="24658141806" fg:w="177450046"/><text x="99.3451%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4,570,884 samples, 0.02%)</title><rect x="99.7899%" y="165" width="0.0184%" height="15" fill="rgb(222,119,46)" fg:x="24831020968" fg:w="4570884"/><text x="100.0399%" y="175.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,570,884 samples, 0.02%)</title><rect x="99.7899%" y="149" width="0.0184%" height="15" fill="rgb(222,165,49)" fg:x="24831020968" fg:w="4570884"/><text x="100.0399%" y="159.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (245,909,885 samples, 0.99%)</title><rect x="98.9485%" y="261" width="0.9883%" height="15" fill="rgb(219,113,52)" fg:x="24621667009" fg:w="245909885"/><text x="99.1985%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (236,776,196 samples, 0.95%)</title><rect x="98.9852%" y="245" width="0.9515%" height="15" fill="rgb(214,7,15)" fg:x="24630800698" fg:w="236776196"/><text x="99.2352%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (223,070,489 samples, 0.90%)</title><rect x="99.0403%" y="229" width="0.8965%" height="15" fill="rgb(235,32,4)" fg:x="24644506405" fg:w="223070489"/><text x="99.2903%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (223,070,489 samples, 0.90%)</title><rect x="99.0403%" y="213" width="0.8965%" height="15" fill="rgb(238,90,54)" fg:x="24644506405" fg:w="223070489"/><text x="99.2903%" y="223.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (218,515,364 samples, 0.88%)</title><rect x="99.0586%" y="197" width="0.8782%" height="15" fill="rgb(213,208,19)" fg:x="24649061530" fg:w="218515364"/><text x="99.3086%" y="207.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (31,985,042 samples, 0.13%)</title><rect x="99.8083%" y="181" width="0.1285%" height="15" fill="rgb(233,156,4)" fg:x="24835591852" fg:w="31985042"/><text x="100.0583%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (27,402,222 samples, 0.11%)</title><rect x="99.8267%" y="165" width="0.1101%" height="15" fill="rgb(207,194,5)" fg:x="24840174672" fg:w="27402222"/><text x="100.0767%" y="175.50"></text></g><g><title>__memcmp_avx2_movbe (9,134,233 samples, 0.04%)</title><rect x="99.9001%" y="149" width="0.0367%" height="15" fill="rgb(206,111,30)" fg:x="24858442661" fg:w="9134233"/><text x="100.1501%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4,579,127 samples, 0.02%)</title><rect x="99.9548%" y="229" width="0.0184%" height="15" fill="rgb(243,70,54)" fg:x="24872056959" fg:w="4579127"/><text x="100.2048%" y="239.50"></text></g><g><title>[unknown] (24,871,988,969 samples, 99.95%)</title><rect x="0.0368%" y="405" width="99.9545%" height="15" fill="rgb(242,28,8)" fg:x="9146815" fg:w="24871988969"/><text x="0.2868%" y="415.50">[unknown]</text></g><g><title>lux::prism::Prism::run (24,871,988,969 samples, 99.95%)</title><rect x="0.0368%" y="389" width="99.9545%" height="15" fill="rgb(219,106,18)" fg:x="9146815" fg:w="24871988969"/><text x="0.2868%" y="399.50">lux::prism::Prism::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,686,450,921 samples, 10.80%)</title><rect x="89.1951%" y="373" width="10.7962%" height="15" fill="rgb(244,222,10)" fg:x="22194684863" fg:w="2686450921"/><text x="89.4451%" y="383.50">std::collections..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,681,884,277 samples, 10.78%)</title><rect x="89.2134%" y="357" width="10.7778%" height="15" fill="rgb(236,179,52)" fg:x="22199251507" fg:w="2681884277"/><text x="89.4634%" y="367.50">hashbrown::map::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,668,269,938 samples, 10.72%)</title><rect x="89.2681%" y="341" width="10.7231%" height="15" fill="rgb(213,23,39)" fg:x="22212865846" fg:w="2668269938"/><text x="89.5181%" y="351.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,291,987,474 samples, 5.19%)</title><rect x="94.7991%" y="325" width="5.1922%" height="15" fill="rgb(238,48,10)" fg:x="23589148310" fg:w="1291987474"/><text x="95.0491%" y="335.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,260,280,826 samples, 5.06%)</title><rect x="94.9265%" y="309" width="5.0648%" height="15" fill="rgb(251,196,23)" fg:x="23620854958" fg:w="1260280826"/><text x="95.1765%" y="319.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,205,609,504 samples, 4.85%)</title><rect x="95.1462%" y="293" width="4.8451%" height="15" fill="rgb(250,152,24)" fg:x="23675526280" fg:w="1205609504"/><text x="95.3962%" y="303.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (273,160,679 samples, 1.10%)</title><rect x="98.8935%" y="277" width="1.0978%" height="15" fill="rgb(209,150,17)" fg:x="24607975105" fg:w="273160679"/><text x="99.1435%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (13,558,890 samples, 0.05%)</title><rect x="99.9368%" y="261" width="0.0545%" height="15" fill="rgb(234,202,34)" fg:x="24867576894" fg:w="13558890"/><text x="100.1868%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (13,558,890 samples, 0.05%)</title><rect x="99.9368%" y="245" width="0.0545%" height="15" fill="rgb(253,148,53)" fg:x="24867576894" fg:w="13558890"/><text x="100.1868%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4,499,698 samples, 0.02%)</title><rect x="99.9732%" y="229" width="0.0181%" height="15" fill="rgb(218,129,16)" fg:x="24876636086" fg:w="4499698"/><text x="100.2232%" y="239.50"></text></g><g><title>all (24,883,304,885 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(216,85,19)" fg:x="0" fg:w="24883304885"/><text x="0.2500%" y="447.50"></text></g><g><title>lux (24,883,304,885 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(235,228,7)" fg:x="0" fg:w="24883304885"/><text x="0.2500%" y="431.50">lux</text></g></svg></svg>