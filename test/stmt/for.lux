// skip
constellation main

fn Prism() {
  emit "traditional";
  for (let i: Light = 0; i < 3; i = i + 1) {
    emit i; // test: <0> <1> <2>
  }


  emit "only_condition";
  only_condition();
  
  emit "only_post";
  only_post();
  
  emit "only_init";
  only_init();
  
  emit "init_cond";
  init_cond();
  
  emit "init_post";
  init_post();
  
  emit "cond_post";
  cond_post();
  
  emit "use_continue";
  use_continue();
  
  emit "forever";
  forever();
}

// for-loop with condition only
fn only_condition() {
  let i: Light = 0;
  for (; i < 1 ;) {
    emit 42; // test: <42>
    break;
  }
}

// for-loop with post only
fn only_post() {
  let i: Light = 0;
  for (;; i = i + 1) {
    emit i; // test: <0>
    break;
  }
}

// for-loop with init only
fn only_init() {
  for (let i: Light = 42;;) {
    emit i; // test: <42>
    break;
  }
}

// for-loop with init + condition
fn init_cond() {
  for (let i: Light = 0; i < 1;) {
    emit i; // test: <0>
    break;
  }
}

// for-loop with init + post
fn init_post() {
  for (let i: Light = 0;; i = i + 1) {
    emit i; // test: <0>
    break;
  }
}

// for-loop with condition + post
fn cond_post() {
  let i: Light = 0;
  for (; i < 1; i = i + 1) {
    emit 7; // test: <7>
    break;
  }
}

// infinite loop + break
fn forever() {
  let i: Light = 0;
  for (;;) {
    emit 123; // test: <123>
    break;
  }
}

// use continue
fn use_continue() {
  for (let i: Light = 0; i < 4; i = i + 1) {
    if i == 2 {
      continue;
    }
    emit i; // test: <0> <1> <3>
    if i == 3 {
      break;
    }
  }
}